begin_compilation
  name " HotSpotCompilation-346[bench.CASBench.escaping()]"
  method "HotSpotCompilation-346[bench.CASBench.escaping()]"
  date 1527004919962
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a29 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@org.graalvm.compiler.nodes.StartNode>@ stateAfter: - #next: a29  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a! Lbench/CASBench;
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 v30 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@org.graalvm.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v30 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a29 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a29 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: CASBench.a
nodeSourcePosition: at bench.CASBench.a(Bench.scala:28) [bci: 1]
at bench.CASBench.escaping(Bench.scala:32) [bci: 1]
nullCheck: false
stamp: n# Ljava/util/concurrent/atomic/AtomicLong;
=== Inputs ===
stateBefore: - 
guard: - 
address: v30 
=== Succesors ===
next: v32 
=== Usages ===
v31 v32 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v30 #next: v32  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
code: ResolvedJavaMethodBytecode<CASBench.escaping()>
duringCall: false
localsSize: 1
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 32
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: a1 
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: a1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateBefore: ?2 
object: a29 
=== Succesors ===
next: i22 
=== Usages ===
=== Predecessor ===
a29 >@ <|@
instruction <@NullCheck|@org.graalvm.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?2 object: a29 #next: i22  <|@  <|@
f <@~|@floating>@ <|@
tid v31 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times8
stamp: void*
=== Inputs ===
base: - 
index: a29 
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: - index: a29  <|@  <|@
f <@~|@floating>@ <|@
tid j4 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at bench.CASBench.escaping(Bench.scala:32) [bci: 4]
rawvalue: 0
stableDimension: 0
stamp: i64 [0] ⇈0000000000000000
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j5 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at bench.CASBench.escaping(Bench.scala:32) [bci: 5]
rawvalue: 1
stableDimension: 0
stamp: i64 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i64
value: long[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i22 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: ANY_LOCATION
nodeSourcePosition: at sun.misc.Unsafe.compareAndSwapLong(Object, long, long, long) [bci: -1]
at java.util.concurrent.atomic.AtomicLong.compareAndSet(AtomicLong.java:147) [bci: 9]
at bench.CASBench.escaping(Bench.scala:32) [bci: 6]
nullCheck: false
stamp: i32
=== Inputs ===
stateBefore: - 
guard: - 
address: v31 
expectedValue: j4 
newValue: j5 
stateAfter: - 
=== Succesors ===
next: v16 
=== Usages ===
i14 
=== Predecessor ===
v32 >@ <|@
instruction <@LogicCompareAndSwap|@org.graalvm.compiler.nodes.java.LogicCompareAndSwapNode>@ stateBefore: - guard: - address: v31 expectedValue: j4 newValue: j5 stateAfter: - #next: v16  <|@  <|@
f <@~|@floating>@ <|@
tid i14 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$63/575803732@23b0e3ca
getReverseOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$64/759660843@1185e3db
inputBits: 32
nodeSourcePosition: at java.util.concurrent.atomic.AtomicLong.compareAndSet(AtomicLong.java:147) [bci: 12]
at bench.CASBench.escaping(Bench.scala:32) [bci: 6]
resultBits: 1
stamp: i1
=== Inputs ===
value: i22 
=== Succesors ===
=== Usages ===
i15 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@org.graalvm.compiler.nodes.calc.NarrowNode>@ value: i22  <|@  <|@
f <@~|@floating>@ <|@
tid i15 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$16/1174728845@6b2a0100
getReverseOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$17/2049777509@675f16c4
inputAlwaysPositive: false
inputBits: 1
nodeSourcePosition: at java.util.concurrent.atomic.AtomicLong.compareAndSet(AtomicLong.java:147) [bci: 12]
at bench.CASBench.escaping(Bench.scala:32) [bci: 6]
resultBits: 32
stamp: i32 [0 - 1] ⇈0000000000000001
=== Inputs ===
value: i14 
=== Succesors ===
=== Usages ===
v16 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@org.graalvm.compiler.nodes.calc.ZeroExtendNode>@ value: i14  <|@  <|@
f <@*|@fixed>@ <|@
tid v16 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at bench.CASBench.escaping(Bench.scala:32) [bci: 9]
stamp: void
=== Inputs ===
result: i15 
memoryMap: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i22 >@ <|@
instruction <@Return|@org.graalvm.compiler.nodes.ReturnNode>@ result: i15 memoryMap: -  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a29 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@org.graalvm.compiler.nodes.StartNode>@ stateAfter: - #next: a29  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a! Lbench/CASBench;
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 v30 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@org.graalvm.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v30 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a29 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a29 <|@
result v1|DWORD[.] <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: CASBench.a
nodeSourcePosition: at bench.CASBench.a(Bench.scala:28) [bci: 1]
at bench.CASBench.escaping(Bench.scala:32) [bci: 1]
nullCheck: false
stamp: n# Ljava/util/concurrent/atomic/AtomicLong;
=== Inputs ===
stateBefore: - 
guard: - 
address: v30 
=== Succesors ===
next: v32 
=== Usages ===
v31 v32 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v30 #next: v32  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
code: ResolvedJavaMethodBytecode<CASBench.escaping()>
duringCall: false
localsSize: 1
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 32
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: a1 
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: a1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateBefore: ?2 
object: a29 
=== Succesors ===
next: i22 
=== Usages ===
=== Predecessor ===
a29 >@ <|@
instruction <@NullCheck|@org.graalvm.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?2 object: a29 #next: i22  <|@  <|@
f <@~|@floating>@ <|@
tid v31 <|@
result [v1|DWORD[.] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times8
stamp: void*
=== Inputs ===
base: - 
index: a29 
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: - index: a29  <|@  <|@
f <@~|@floating>@ <|@
tid j4 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at bench.CASBench.escaping(Bench.scala:32) [bci: 4]
rawvalue: 0
stableDimension: 0
stamp: i64 [0] ⇈0000000000000000
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j5 <|@
result long[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at bench.CASBench.escaping(Bench.scala:32) [bci: 5]
rawvalue: 1
stableDimension: 0
stamp: i64 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i64
value: long[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i22 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: ANY_LOCATION
nodeSourcePosition: at sun.misc.Unsafe.compareAndSwapLong(Object, long, long, long) [bci: -1]
at java.util.concurrent.atomic.AtomicLong.compareAndSet(AtomicLong.java:147) [bci: 9]
at bench.CASBench.escaping(Bench.scala:32) [bci: 6]
nullCheck: false
stamp: i32
=== Inputs ===
stateBefore: - 
guard: - 
address: v31 
expectedValue: j4 
newValue: j5 
stateAfter: - 
=== Succesors ===
next: v16 
=== Usages ===
i14 
=== Predecessor ===
v32 >@ <|@
instruction <@LogicCompareAndSwap|@org.graalvm.compiler.nodes.java.LogicCompareAndSwapNode>@ stateBefore: - guard: - address: v31 expectedValue: j4 newValue: j5 stateAfter: - #next: v16  <|@  <|@
f <@~|@floating>@ <|@
tid i14 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$63/575803732@23b0e3ca
getReverseOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$64/759660843@1185e3db
inputBits: 32
nodeSourcePosition: at java.util.concurrent.atomic.AtomicLong.compareAndSet(AtomicLong.java:147) [bci: 12]
at bench.CASBench.escaping(Bench.scala:32) [bci: 6]
resultBits: 1
stamp: i1
=== Inputs ===
value: i22 
=== Succesors ===
=== Usages ===
i15 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@org.graalvm.compiler.nodes.calc.NarrowNode>@ value: i22  <|@  <|@
f <@~|@floating>@ <|@
tid i15 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$16/1174728845@6b2a0100
getReverseOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$17/2049777509@675f16c4
inputAlwaysPositive: false
inputBits: 1
nodeSourcePosition: at java.util.concurrent.atomic.AtomicLong.compareAndSet(AtomicLong.java:147) [bci: 12]
at bench.CASBench.escaping(Bench.scala:32) [bci: 6]
resultBits: 32
stamp: i32 [0 - 1] ⇈0000000000000001
=== Inputs ===
value: i14 
=== Succesors ===
=== Usages ===
v16 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@org.graalvm.compiler.nodes.calc.ZeroExtendNode>@ value: i14  <|@  <|@
f <@*|@fixed>@ <|@
tid v16 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at bench.CASBench.escaping(Bench.scala:32) [bci: 9]
stamp: void
=== Inputs ===
result: i15 
memoryMap: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i22 >@ <|@
instruction <@Return|@org.graalvm.compiler.nodes.ReturnNode>@ result: i15 memoryMap: -  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@7c62a036 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[.] = MOV [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@bench.CASBench.escaping(Bench.scala:32) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + v1|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOVE input: long[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = CAS (address: [v1|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: v2|QWORD) accessKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: v4|DWORD) condition: = <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = AND v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@f96b858 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@7c62a036 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[.] = MOV [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@bench.CASBench.escaping(Bench.scala:32) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + v1|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOVE input: long[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = CAS (address: [v1|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: v2|QWORD) accessKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: v4|DWORD) condition: = <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = AND v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@f96b858 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: invokevirtual #6          // a:()java.util.concurrent.atomic.AtomicLong
     4: lconst_0      
     5: lconst_1      
     6: invokevirtual #4          // java.util.concurrent.atomic.AtomicLong.compareAndSet:(long, long)boolean
     9: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@7c62a036 slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@reference-map: [rsi:0, r10:0]
live-base-pointers: []
bench.CASBench.escaping(Bench.scala:32) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + r10|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   14  <|@ instruction r11|QWORD = MOVE input: long[1|0x1] <|@ <|@
      nr   16  <|@ instruction rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   20  <|@ instruction r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: = <|@ <|@
      nr   22  <|@ instruction r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr   26  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@f96b858 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: invokevirtual #6          // a:()java.util.concurrent.atomic.AtomicLong
     4: lconst_0      
     5: lconst_1      
     6: invokevirtual #4          // java.util.concurrent.atomic.AtomicLong.compareAndSet:(long, long)boolean
     9: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@7c62a036 slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@reference-map: [rsi:0, r10:0]
live-base-pointers: []
bench.CASBench.escaping(Bench.scala:32) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + r10|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   14  <|@ instruction r11|QWORD = MOVE input: long[1|0x1] <|@ <|@
      nr   16  <|@ instruction rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   20  <|@ instruction r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: = <|@ <|@
      nr   22  <|@ instruction r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr   26  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@f96b858 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: invokevirtual #6          // a:()java.util.concurrent.atomic.AtomicLong
     4: lconst_0      
     5: lconst_1      
     6: invokevirtual #4          // java.util.concurrent.atomic.AtomicLong.compareAndSet:(long, long)boolean
     9: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849c1e203493bc20f85efffffff900f1f80000000000f1f800000000089842400c0feff4883ec1848896c2410448b5610438504d448c7c00000000049c7c301000000f04e0fb11cd510000000b80100000041ba00000000440f44d045231500000000418bc2488b6c24104883c418850500000000c5f877c3e80000000090e80000000090  <||@
  Comment 0 2  <||@
  Comment 11 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x1024a1f78, value=0x10ba1de60]:0x10ba1de60}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 3  <||@
  Comment 32 1  <||@
  Comment 43 block B0 null  <||@
  Comment 43 0 [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 43 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 48 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@7c62a036 slotKind: QWORD  <||@
  Comment 48 8 r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 52 10 NULLCHECK [r12|QWORD[*] + r10|DWORD[.] * 8] state [bci:0]  <||@
  Comment 52 [rsi:0, r10:0]at bench.CASBench.escaping(Bench.scala:32) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 52 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 56 12 rax|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 63 14 r11|QWORD = MOVE input: long[1|0x1]  <||@
  Comment 70 16 rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD  <||@
  Comment 80 18 rax|DWORD = MOVE input: boolean[true|0x1]  <||@
  Comment 85 20 r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: =  <||@
  Comment 95 22 r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1]  <||@
  Comment 95 {DataSection[0x0]}  <||@
  Comment 102 24 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 105 26 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@f96b858  <||@
  Comment 114 12  <||@
  Comment 124 {Stub<ExceptionHandlerStub.exceptionHandler>@0x10be4bf20:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 124 4  <||@
  Comment 130 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x1024a1f88, value=0x10ba1f500]:0x10ba1f500}  <||@
  Comment 130 5  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-346[bench.CASBench.escaping()]"
  method "HotSpotCompilation-346[bench.CASBench.escaping()]"
  date 1527005022346
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 10bbc6e40 448b560849c1e203493bc20f850f70e5ff900f1f80000000000f1f800000000089842400c0feff4883ec1848896c2410448b5610438504d448c7c00000000049c7c301000000f04e0fb11cd510000000b80100000041ba00000000440f44d04523157affffff418bc2488b6c24104883c41885054e2182f5c5f877c3e85f50280090e83986e5ff90  <||@
  Comment 0 2  <||@
  Comment 11 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x1024a1f78, value=0x10ba1de60]:0x10ba1de60}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 3  <||@
  Comment 32 1  <||@
  Comment 43 block B0 null  <||@
  Comment 43 0 [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 43 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 48 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@7c62a036 slotKind: QWORD  <||@
  Comment 48 8 r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 52 10 NULLCHECK [r12|QWORD[*] + r10|DWORD[.] * 8] state [bci:0]  <||@
  Comment 52 [rsi:0, r10:0]at bench.CASBench.escaping(Bench.scala:32) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 52 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 56 12 rax|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 63 14 r11|QWORD = MOVE input: long[1|0x1]  <||@
  Comment 70 16 rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD  <||@
  Comment 80 18 rax|DWORD = MOVE input: boolean[true|0x1]  <||@
  Comment 85 20 r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: =  <||@
  Comment 95 22 r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1]  <||@
  Comment 95 {DataSection[0x0]}  <||@
  Comment 102 24 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 105 26 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@f96b858  <||@
  Comment 114 12  <||@
  Comment 124 {Stub<ExceptionHandlerStub.exceptionHandler>@0x10be4bf20:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 124 4  <||@
  Comment 130 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x1024a1f88, value=0x10ba1f500]:0x10ba1f500}  <||@
  Comment 130 5  <||@
  HexCodeFile>>> <|@
end_nmethod
