begin_compilation
  name " HotSpotCompilation-726[bench.StringOp.appendCont()]"
  method "HotSpotCompilation-726[bench.StringOp.appendCont()]"
  date 1527728114611
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: j1834 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@org.graalvm.compiler.nodes.StartNode>@ stateAfter: - #next: j1834  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1834 <|@
d <@d|@=== Debug Properties ===
directUse: true
incoming: false
register: r15
stamp: i64
=== Inputs ===
=== Succesors ===
next: j1854 
=== Usages ===
v2201 v2202 
=== Predecessor ===
v0 >@ <|@
instruction <@ReadRegister|@org.graalvm.compiler.replacements.nodes.ReadRegisterNode>@ #next: j1854  <|@  <|@
f <@~|@floating>@ <|@
tid v2201 <|@
d <@d|@=== Debug Properties ===
displacement: 96
scale: Times1
stamp: void*
=== Inputs ===
base: j1834 
index: - 
=== Succesors ===
=== Usages ===
j1854 v1856 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1834 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1854 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabTop
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2201 
=== Succesors ===
next: j1855 
=== Usages ===
j2040 j1860 v2216 
=== Predecessor ===
j1834 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2201 #next: j1855  <|@  <|@
f <@~|@floating>@ <|@
tid v2202 <|@
d <@d|@=== Debug Properties ===
displacement: 112
scale: Times1
stamp: void*
=== Inputs ===
base: j1834 
index: - 
=== Succesors ===
=== Usages ===
j1855 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1834 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1855 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabEnd
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2202 
=== Succesors ===
next: v1842 
=== Usages ===
v1839 
=== Predecessor ===
j1854 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2202 #next: v1842  <|@  <|@
f <@~|@floating>@ <|@
tid j1631 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 48
stableDimension: 0
stamp: i64 [48] ⇊0000000000000030 ⇈0000000000000030
stampKind: i64
value: long[48|0x30]
=== Inputs ===
=== Succesors ===
=== Usages ===
j2040 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j2040 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1854 
y: j1631 
=== Succesors ===
=== Usages ===
v1839 v1856 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1854 y: j1631  <|@  <|@
f <@~|@floating>@ <|@
tid v1839 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: org.graalvm.compiler.nodes.calc.IntegerBelowNode$BelowOp@6e623cd0
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j1855 
y: j2040 
=== Succesors ===
=== Usages ===
v1842 
=== Predecessor ===
- >@ <|@
instruction <@|<||@org.graalvm.compiler.nodes.calc.IntegerBelowNode>@ x: j1855 y: j2040  <|@  <|@
f <@~|@floating>@ <|@
tid i418 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i32 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
?1155 a1847 a1954 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1832 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<[I, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<[I, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
a1847 a1954 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a! Lbench/StringOp;
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@org.graalvm.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
code: ResolvedJavaMethodBytecode<StringOp.appendCont()>
duringCall: false
localsSize: 2
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 147
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: a1 - 
=== Succesors ===
=== Usages ===
a1847 a1907 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: a1 -  <|@  <|@
f <@*|@fixed>@ <|@
tid v1842 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.010000000000000009
=== Inputs ===
condition: v1839 
=== Succesors ===
trueSuccessor: v1840 
falseSuccessor: v1841 
=== Usages ===
=== Predecessor ===
j1855 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v1839 #trueSuccessor: v1840 #falseSuccessor: v1841  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1840 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: a1847 
=== Usages ===
=== Predecessor ===
v1842 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: a1847  <|@  <|@
f <@~|@floating>@ <|@
tid i2042 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8] ⇊0000000000000008 ⇈0000000000000008
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
a1847 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1847 <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: new_array(KlassPointer,int,boolean)Object
foreignCalls: org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider@52a1ad47
stamp: a! Ljava/lang/Object;
=== Inputs ===
stateAfter: - 
stateDuring: ?2 
arguments: v1832 i2042 i418 
=== Succesors ===
next: j1848 
=== Usages ===
j1848 
=== Predecessor ===
v1840 >@ <|@
instruction <@ForeignCall|@org.graalvm.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: ?2 arguments: v1832 i2042 i418 #next: j1848  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1848 <|@
d <@d|@=== Debug Properties ===
stamp: i64
trackedPointer: true
=== Inputs ===
input: a1847 
=== Succesors ===
next: v1861 
=== Usages ===
j1860 
=== Predecessor ===
a1847 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: a1847 #next: v1861  <|@  <|@
f <@*|@fixed>@ <|@
tid v1861 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1858 
=== Predecessor ===
j1848 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1841 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v1856 
=== Usages ===
=== Predecessor ===
v1842 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v1856  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1856 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: TlabTop
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2201 
value: j2040 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1852 
=== Usages ===
=== Predecessor ===
v1841 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2201 value: j2040 stateAfter: - lastLocationAccess: - #next: v1852  <|@  <|@
f <@~|@floating>@ <|@
tid v2216 <|@
d <@d|@=== Debug Properties ===
displacement: 240
scale: Times1
stamp: void*
=== Inputs ===
base: j1854 
index: - 
=== Succesors ===
=== Usages ===
v1852 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1854 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1852 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2216 
=== Succesors ===
next: v1859 
=== Usages ===
=== Predecessor ===
v1856 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2216 #next: v1859  <|@  <|@
f <@*|@fixed>@ <|@
tid v1859 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1858 
=== Predecessor ===
v1852 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid j1860 <|@
d <@d|@=== Debug Properties ===
stamp: i64
valueDescription: i64
=== Inputs ===
merge: v1858 
values: j1854 j1848 
=== Succesors ===
=== Usages ===
v2205 v2204 a1703 v2203 v2217 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@org.graalvm.compiler.nodes.ValuePhiNode>@ merge: v1858 values: j1854 j1848  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1858 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1859 v1861 
=== Succesors ===
next: a1703 
=== Usages ===
j1860 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@org.graalvm.compiler.nodes.MergeNode>@ stateAfter: - ends: v1859 v1861 #next: a1703  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1703 <|@
d <@d|@=== Debug Properties ===
stamp: a -
trackedPointer: true
=== Inputs ===
input: j1860 
=== Succesors ===
next: v1872 
=== Usages ===
a1720 
=== Predecessor ===
v1858 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1860 #next: v1872  <|@  <|@
f <@~|@floating>@ <|@
tid v2203 <|@
d <@d|@=== Debug Properties ===
displacement: 12
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1872 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1156 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16] ⇊0000000000000010 ⇈0000000000000010
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1872 a1954 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1872 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2203 
value: i1156 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1873 
=== Usages ===
=== Predecessor ===
a1703 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2203 value: i1156 stateAfter: - lastLocationAccess: - #next: v1873  <|@  <|@
f <@~|@floating>@ <|@
tid v2204 <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1873 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j1867 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i64 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i64
value: long[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1873 v1931 v1997 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1873 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2204 
value: j1867 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1877 
=== Usages ===
=== Predecessor ===
v1872 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2204 value: j1867 stateAfter: - lastLocationAccess: - #next: v1877  <|@  <|@
f <@~|@floating>@ <|@
tid v2205 <|@
d <@d|@=== Debug Properties ===
displacement: 8
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1877 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2045 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<[C, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 0 shift: 3)
stampKind: Klass*(compressed base: 0 shift: 3)
value: meta{HotSpotType<[C, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1877 v1934 v2000 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1877 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2205 
value: v2045 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1882 
=== Usages ===
=== Predecessor ===
v1873 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2205 value: v2045 stateAfter: - lastLocationAccess: - #next: v1882  <|@  <|@
f <@~|@floating>@ <|@
tid v2217 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1882 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v1880 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: <28147922879250529,29273839966224485,30399757053198441,29836811394809962>
stableDimension: 0
stamp: <i64,i64,i64,i64>
stampKind: <i64,i64,i64,i64>
value: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962>
=== Inputs ===
=== Succesors ===
=== Usages ===
v1882 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1882 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2217 
value: v1880 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: a1720 
=== Usages ===
=== Predecessor ===
v1877 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2217 value: v1880 stateAfter: - lastLocationAccess: - #next: a1720  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1720 <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a -
=== Inputs ===
object: a1703 
=== Succesors ===
next: v1721 
=== Usages ===
v2199 
=== Predecessor ===
v1882 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1703 #next: v1721  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1721 <|@
d <@d|@=== Debug Properties ===
barriers: 8
location: INIT_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: j1886 
=== Usages ===
=== Predecessor ===
a1720 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: j1886  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1886 <|@
d <@d|@=== Debug Properties ===
directUse: true
incoming: false
register: r15
stamp: i64
=== Inputs ===
=== Succesors ===
next: j1927 
=== Usages ===
v2206 v2207 
=== Predecessor ===
v1721 >@ <|@
instruction <@ReadRegister|@org.graalvm.compiler.replacements.nodes.ReadRegisterNode>@ #next: j1927  <|@  <|@
f <@~|@floating>@ <|@
tid v2206 <|@
d <@d|@=== Debug Properties ===
displacement: 96
scale: Times1
stamp: void*
=== Inputs ===
base: j1886 
index: - 
=== Succesors ===
=== Usages ===
j1927 v1929 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1886 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1927 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabTop
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2206 
=== Succesors ===
next: j1928 
=== Usages ===
j2107 v2208 v2209 a1906 v2210 v2245 v2246 v2247 v2248 
=== Predecessor ===
j1886 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2206 #next: j1928  <|@  <|@
f <@~|@floating>@ <|@
tid v2207 <|@
d <@d|@=== Debug Properties ===
displacement: 112
scale: Times1
stamp: void*
=== Inputs ===
base: j1886 
index: - 
=== Succesors ===
=== Usages ===
j1928 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1886 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1928 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabEnd
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2207 
=== Succesors ===
next: v1902 
=== Usages ===
v1896 
=== Predecessor ===
j1927 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2207 #next: v1902  <|@  <|@
f <@~|@floating>@ <|@
tid j2106 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 88
stableDimension: 0
stamp: i64 [88] ⇊0000000000000058 ⇈0000000000000058
stampKind: i64
value: long[88|0x58]
=== Inputs ===
=== Succesors ===
=== Usages ===
j2107 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j2107 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1927 
y: j2106 
=== Succesors ===
=== Usages ===
v1896 v1929 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1927 y: j2106  <|@  <|@
f <@~|@floating>@ <|@
tid v1896 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: org.graalvm.compiler.nodes.calc.IntegerBelowNode$BelowOp@6e623cd0
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j1928 
y: j2107 
=== Succesors ===
=== Usages ===
v1902 
=== Predecessor ===
- >@ <|@
instruction <@|<||@org.graalvm.compiler.nodes.calc.IntegerBelowNode>@ x: j1928 y: j2107  <|@  <|@
f <@~|@floating>@ <|@
tid i62 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 0
stableDimension: 0
stamp: i32 [0] ⇈0000000000000000
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1992 a1907 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i1340 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 34
stableDimension: 0
stamp: i32 [34] ⇊0000000000000022 ⇈0000000000000022
stampKind: i32
value: int[34|0x22]
=== Inputs ===
=== Succesors ===
=== Usages ===
a1907 v1930 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1902 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.010000000000000009
=== Inputs ===
condition: v1896 
=== Succesors ===
trueSuccessor: v1901 
falseSuccessor: v1900 
=== Usages ===
=== Predecessor ===
j1928 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v1896 #trueSuccessor: v1901 #falseSuccessor: v1900  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1901 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: a1907 
=== Usages ===
=== Predecessor ===
v1902 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: a1907  <|@  <|@
f <@~|@floating>@ <|@
tid v1866 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<[C, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<[C, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
a1907 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1907 <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: new_array(KlassPointer,int,boolean)Object
foreignCalls: org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider@52a1ad47
stamp: a! Ljava/lang/Object;
=== Inputs ===
stateAfter: - 
stateDuring: ?2 
arguments: v1866 i1340 i62 
=== Succesors ===
next: v1910 
=== Usages ===
a1911 
=== Predecessor ===
v1901 >@ <|@
instruction <@ForeignCall|@org.graalvm.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: ?2 arguments: v1866 i1340 i62 #next: v1910  <|@  <|@
f <@*|@fixed>@ <|@
tid v1910 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1909 
=== Predecessor ===
a1907 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1900 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v1929 
=== Usages ===
=== Predecessor ===
v1902 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v1929  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1929 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: TlabTop
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2206 
value: j2107 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1917 
=== Usages ===
=== Predecessor ===
v1900 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2206 value: j2107 stateAfter: - lastLocationAccess: - #next: v1917  <|@  <|@
f <@~|@floating>@ <|@
tid v2245 <|@
d <@d|@=== Debug Properties ===
displacement: 280
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1917 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1917 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2245 
=== Succesors ===
next: v1919 
=== Usages ===
=== Predecessor ===
v1929 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2245 #next: v1919  <|@  <|@
f <@~|@floating>@ <|@
tid v2246 <|@
d <@d|@=== Debug Properties ===
displacement: 344
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1919 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1919 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2246 
=== Succesors ===
next: v1922 
=== Usages ===
=== Predecessor ===
v1917 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2246 #next: v1922  <|@  <|@
f <@~|@floating>@ <|@
tid v2247 <|@
d <@d|@=== Debug Properties ===
displacement: 408
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1922 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1922 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2247 
=== Succesors ===
next: v1925 
=== Usages ===
=== Predecessor ===
v1919 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2247 #next: v1925  <|@  <|@
f <@~|@floating>@ <|@
tid v2248 <|@
d <@d|@=== Debug Properties ===
displacement: 472
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1925 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1925 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2248 
=== Succesors ===
next: v1930 
=== Usages ===
=== Predecessor ===
v1922 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2248 #next: v1930  <|@  <|@
f <@~|@floating>@ <|@
tid v2208 <|@
d <@d|@=== Debug Properties ===
displacement: 12
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1930 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1930 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2208 
value: i1340 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1931 
=== Usages ===
=== Predecessor ===
v1925 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2208 value: i1340 stateAfter: - lastLocationAccess: - #next: v1931  <|@  <|@
f <@~|@floating>@ <|@
tid v2209 <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1931 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1931 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2209 
value: j1867 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1934 
=== Usages ===
=== Predecessor ===
v1930 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2209 value: j1867 stateAfter: - lastLocationAccess: - #next: v1934  <|@  <|@
f <@~|@floating>@ <|@
tid v2210 <|@
d <@d|@=== Debug Properties ===
displacement: 8
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1934 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1934 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2210 
value: v2045 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1905 
=== Usages ===
=== Predecessor ===
v1931 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2210 value: v2045 stateAfter: - lastLocationAccess: - #next: v1905  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1905 <|@
d <@d|@=== Debug Properties ===
barriers: 8
location: INIT_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: a1906 
=== Usages ===
=== Predecessor ===
v1934 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: a1906  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1906 <|@
d <@d|@=== Debug Properties ===
stamp: a! -
trackedPointer: true
=== Inputs ===
input: j1927 
=== Succesors ===
next: v1908 
=== Usages ===
a1911 
=== Predecessor ===
v1905 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1927 #next: v1908  <|@  <|@
f <@*|@fixed>@ <|@
tid v1908 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1909 
=== Predecessor ===
a1906 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid a1911 <|@
d <@d|@=== Debug Properties ===
stamp: a! -
valueDescription: a -
=== Inputs ===
merge: v1909 
values: a1906 a1907 
=== Succesors ===
=== Usages ===
v2249 a1817 v2200 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@org.graalvm.compiler.nodes.ValuePhiNode>@ merge: v1909 values: a1906 a1907  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1909 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1908 v1910 
=== Succesors ===
next: v2139 
=== Usages ===
a1911 v2163 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@org.graalvm.compiler.nodes.MergeNode>@ stateAfter: - ends: v1908 v1910 #next: v2139  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2139 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
anchored: - 
=== Succesors ===
next: v2163 
=== Usages ===
j2140 j2141 
=== Predecessor ===
v1909 >@ <|@
instruction <@ValueAnchor|@org.graalvm.compiler.nodes.extended.ValueAnchorNode>@ anchored: - #next: v2163  <|@  <|@
f <@~|@floating>@ <|@
tid v2199 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1720 
index: - 
=== Succesors ===
=== Usages ===
j2140 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1720 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j2140 <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
anchor: v2139 
address: v2199 
=== Succesors ===
=== Usages ===
v2251 
=== Predecessor ===
- >@ <|@
instruction <@d|@com.oracle.graal.enterprise.n.d>@ anchor: v2139 address: v2199  <|@  <|@
f <@~|@floating>@ <|@
tid v2251 <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j2140 
index: - 
=== Succesors ===
=== Usages ===
v2163 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2140 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2163 <|@
d <@d|@=== Debug Properties ===
barrierType: PRECISE
forceFixed: false
location: Array: char
nullCheck: false
stamp: <i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16>
=== Inputs ===
stateBefore: - 
guard: v1909 
address: v2251 
=== Succesors ===
next: v2156 
=== Usages ===
v2156 
=== Predecessor ===
v2139 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: v1909 address: v2251 #next: v2156  <|@  <|@
f <@~|@floating>@ <|@
tid v2200 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1911 
index: - 
=== Succesors ===
=== Usages ===
j2141 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1911 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j2141 <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
anchor: v2139 
address: v2200 
=== Succesors ===
=== Usages ===
v2250 
=== Predecessor ===
- >@ <|@
instruction <@d|@com.oracle.graal.enterprise.n.d>@ anchor: v2139 address: v2200  <|@  <|@
f <@~|@floating>@ <|@
tid v2250 <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j2141 
index: - 
=== Succesors ===
=== Usages ===
v2156 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2141 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2156 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: VectorInitialization
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2250 
value: v2163 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2147 
=== Usages ===
=== Predecessor ===
v2163 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2250 value: v2163 stateAfter: - lastLocationAccess: - #next: v2147  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2147 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
anchored: - 
=== Succesors ===
next: v2158 
=== Usages ===
j2148 
=== Predecessor ===
v2156 >@ <|@
instruction <@ValueAnchor|@org.graalvm.compiler.nodes.extended.ValueAnchorNode>@ anchored: - #next: v2158  <|@  <|@
f <@~|@floating>@ <|@
tid v2249 <|@
d <@d|@=== Debug Properties ===
displacement: 48
scale: Times1
stamp: void*
=== Inputs ===
base: a1911 
index: - 
=== Succesors ===
=== Usages ===
j2148 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1911 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j2148 <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
anchor: v2147 
address: v2249 
=== Succesors ===
=== Usages ===
v2252 v2253 
=== Predecessor ===
- >@ <|@
instruction <@d|@com.oracle.graal.enterprise.n.d>@ anchor: v2147 address: v2249  <|@  <|@
f <@~|@floating>@ <|@
tid v2252 <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j2148 
index: - 
=== Succesors ===
=== Usages ===
v2158 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2148 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2161 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: <0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>
stableDimension: 0
stamp: <i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000>
stampKind: <i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16>
value: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>
=== Inputs ===
=== Succesors ===
=== Usages ===
v2158 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2158 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: VectorInitialization
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2252 
value: v2161 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2160 
=== Usages ===
=== Predecessor ===
v2147 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2252 value: v2161 stateAfter: - lastLocationAccess: - #next: v2160  <|@  <|@
f <@~|@floating>@ <|@
tid v2253 <|@
d <@d|@=== Debug Properties ===
displacement: 32
scale: Times1
stamp: void*
=== Inputs ===
base: j2148 
index: - 
=== Succesors ===
=== Usages ===
v2160 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2148 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2162 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: <0,0>
stableDimension: 0
stamp: <i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000>
stampKind: <i16,i16>
value: SIMD<0,0>
=== Inputs ===
=== Succesors ===
=== Usages ===
v2160 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2160 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: VectorInitialization
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2253 
value: v2162 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: a1817 
=== Usages ===
=== Predecessor ===
v2158 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2253 value: v2162 stateAfter: - lastLocationAccess: - #next: a1817  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1817 <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a! -
=== Inputs ===
object: a1911 
=== Succesors ===
next: v1460 
=== Usages ===
v2196 v2182 v2198 v2197 ?1358 v2181 v2183 v2184 v2185 v2186 v2187 v2188 v2189 v2190 v2191 v2192 v2193 v2194 v2195 
=== Predecessor ===
v2160 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1911 #next: v1460  <|@  <|@
f <@~|@floating>@ <|@
tid v2181 <|@
d <@d|@=== Debug Properties ===
displacement: 48
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
v1460 i2180 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1632 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 107
stableDimension: 0
stamp: i16 [107] ⇊000000000000006b ⇈000000000000006b
stampKind: i16
value: int[107|0x6b]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1460 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1460 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Array: char
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2181 
value: i1632 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1512 
=== Usages ===
=== Predecessor ===
a1817 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2181 value: i1632 stateAfter: - lastLocationAccess: - #next: v1512  <|@  <|@
f <@~|@floating>@ <|@
tid v2182 <|@
d <@d|@=== Debug Properties ===
displacement: 50
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
v1512 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1640 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 108
stableDimension: 0
stamp: i16 [108] ⇊000000000000006c ⇈000000000000006c
stampKind: i16
value: int[108|0x6c]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1512 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1512 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Array: char
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2182 
value: i1640 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: j1943 
=== Usages ===
=== Predecessor ===
v1460 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2182 value: i1640 stateAfter: - lastLocationAccess: - #next: j1943  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1943 <|@
d <@d|@=== Debug Properties ===
directUse: true
incoming: false
register: r15
stamp: i64
=== Inputs ===
=== Succesors ===
next: j1964 
=== Usages ===
v2211 v2212 
=== Predecessor ===
v1512 >@ <|@
instruction <@ReadRegister|@org.graalvm.compiler.replacements.nodes.ReadRegisterNode>@ #next: j1964  <|@  <|@
f <@~|@floating>@ <|@
tid v2211 <|@
d <@d|@=== Debug Properties ===
displacement: 96
scale: Times1
stamp: void*
=== Inputs ===
base: j1943 
index: - 
=== Succesors ===
=== Usages ===
j1964 v1966 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1943 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1964 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabTop
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2211 
=== Succesors ===
next: j1965 
=== Usages ===
j2051 j1970 v2218 v2219 v2220 v2221 
=== Predecessor ===
j1943 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2211 #next: j1965  <|@  <|@
f <@~|@floating>@ <|@
tid v2212 <|@
d <@d|@=== Debug Properties ===
displacement: 112
scale: Times1
stamp: void*
=== Inputs ===
base: j1943 
index: - 
=== Succesors ===
=== Usages ===
j1965 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1943 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1965 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabEnd
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2212 
=== Succesors ===
next: v1951 
=== Usages ===
v1948 
=== Predecessor ===
j1964 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2212 #next: v1951  <|@  <|@
f <@~|@floating>@ <|@
tid j2050 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 80
stableDimension: 0
stamp: i64 [80] ⇊0000000000000050 ⇈0000000000000050
stampKind: i64
value: long[80|0x50]
=== Inputs ===
=== Succesors ===
=== Usages ===
j2051 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j2051 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1964 
y: j2050 
=== Succesors ===
=== Usages ===
v1948 v1966 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1964 y: j2050  <|@  <|@
f <@~|@floating>@ <|@
tid v1948 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: org.graalvm.compiler.nodes.calc.IntegerBelowNode$BelowOp@6e623cd0
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j1965 
y: j2051 
=== Succesors ===
=== Usages ===
v1951 
=== Predecessor ===
- >@ <|@
instruction <@|<||@org.graalvm.compiler.nodes.calc.IntegerBelowNode>@ x: j1965 y: j2051  <|@  <|@
f <@*|@fixed>@ <|@
tid v1951 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.010000000000000009
=== Inputs ===
condition: v1948 
=== Succesors ===
trueSuccessor: v1949 
falseSuccessor: v1950 
=== Usages ===
=== Predecessor ===
j1965 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v1948 #trueSuccessor: v1949 #falseSuccessor: v1950  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1949 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: a1954 
=== Usages ===
=== Predecessor ===
v1951 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: a1954  <|@  <|@
tid ?61 <|@
d <@d|@=== Debug Properties ===
bci: 17
code: ResolvedJavaMethodBytecode<StringOp.appendCont()>
duringCall: true
localsSize: 2
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 149
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: - - 
=== Succesors ===
=== Usages ===
?403 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: - -  <|@  <|@
tid a64 <|@
d <@d|@=== Debug Properties ===
fields: [Ljdk.vm.ci.hotspot.HotSpotResolvedJavaField;@13d38966
hasIdentity: true
objectId: -1
stamp: a!# Ljava/lang/StringBuffer;
type: HotSpotType<Ljava/lang/StringBuffer;, resolved>
=== Inputs ===
=== Succesors ===
=== Usages ===
?693 ?166 ?1155 ?166 ?403 ?693 ?1358 
=== Predecessor ===
- >@ <|@
instruction <@VirtualInstance|@org.graalvm.compiler.nodes.virtual.VirtualInstanceNode>@  <|@  <|@
tid ?166 <|@
d <@d|@=== Debug Properties ===
=== Inputs ===
object: a64 
materializedValue: a64 
=== Succesors ===
=== Usages ===
?403 
=== Predecessor ===
- >@ <|@
instruction <@MaterializedObjectState|@org.graalvm.compiler.virtual.nodes.MaterializedObjectState>@ object: a64 materializedValue: a64  <|@  <|@
tid ?403 <|@
d <@d|@=== Debug Properties ===
bci: 115
code: ResolvedJavaMethodBytecode<StringOp.cont(StringBuffer)>
duringCall: true
localsSize: 2
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 169
stackSize: 0
=== Inputs ===
outerFrameState: ?61 
values: - a64 
virtualObjectMappings: ?166 
=== Succesors ===
=== Usages ===
?693 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?61 values: - a64 virtualObjectMappings: ?166  <|@  <|@
tid v392 <|@
d <@d|@=== Debug Properties ===
eliminated: false
lockDepth: 0
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
?693 
=== Predecessor ===
- >@ <|@
instruction <@MonitorId|@org.graalvm.compiler.nodes.java.MonitorIdNode>@  <|@  <|@
tid ?693 <|@
d <@d|@=== Debug Properties ===
bci: 7
code: ResolvedJavaMethodBytecode<StringBuffer.append(String)>
duringCall: true
localsSize: 2
locksSize: 1
rethrowException: false
sourceFile: StringBuffer.java
sourceLine: 270
stackSize: 0
=== Inputs ===
outerFrameState: ?403 
values: a64 - a64 
monitorIds: v392 
=== Succesors ===
=== Usages ===
?1155 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?403 values: a64 - a64 monitorIds: v392  <|@  <|@
tid ?1155 <|@
d <@d|@=== Debug Properties ===
bci: 35
code: ResolvedJavaMethodBytecode<AbstractStringBuilder.append(String)>
duringCall: true
localsSize: 3
locksSize: 0
rethrowException: false
sourceFile: AbstractStringBuilder.java
sourceLine: 449
stackSize: 0
=== Inputs ===
outerFrameState: ?693 
values: a64 - i418 
=== Succesors ===
=== Usages ===
?1153 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?693 values: a64 - i418  <|@  <|@
f <@~|@floating>@ <|@
tid i1268 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 17
stableDimension: 0
stamp: i32 [17] ⇊0000000000000011 ⇈0000000000000011
stampKind: i32
value: int[17|0x11]
=== Inputs ===
=== Succesors ===
=== Usages ===
?1358 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
tid ?1358 <|@
d <@d|@=== Debug Properties ===
=== Inputs ===
object: a64 
values: i1268 a1817 - 
=== Succesors ===
=== Usages ===
?1153 
=== Predecessor ===
- >@ <|@
instruction <@VirtualObjectState|@org.graalvm.compiler.virtual.nodes.VirtualObjectState>@ object: a64 values: i1268 a1817 -  <|@  <|@
tid ?1153 <|@
d <@d|@=== Debug Properties ===
bci: 61
code: ResolvedJavaMethodBytecode<String.getChars(int, int, char[], int)>
duringCall: false
localsSize: 5
locksSize: 0
rethrowException: false
sourceFile: String.java
sourceLine: 827
stackSize: 0
=== Inputs ===
outerFrameState: ?1155 
values: - - - - - 
virtualObjectMappings: ?1358 
=== Succesors ===
=== Usages ===
a1954 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?1155 values: - - - - - virtualObjectMappings: ?1358  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1954 <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: new_array(KlassPointer,int,boolean)Object
foreignCalls: org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider@52a1ad47
stamp: a! Ljava/lang/Object;
=== Inputs ===
stateAfter: - 
stateDuring: ?1153 
arguments: v1832 i1156 i418 
=== Succesors ===
next: j1955 
=== Usages ===
j1955 
=== Predecessor ===
v1949 >@ <|@
instruction <@ForeignCall|@org.graalvm.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: ?1153 arguments: v1832 i1156 i418 #next: j1955  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1955 <|@
d <@d|@=== Debug Properties ===
stamp: i64
trackedPointer: true
=== Inputs ===
input: a1954 
=== Succesors ===
next: v1971 
=== Usages ===
j1970 
=== Predecessor ===
a1954 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: a1954 #next: v1971  <|@  <|@
f <@*|@fixed>@ <|@
tid v1971 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1968 
=== Predecessor ===
j1955 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1950 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v1966 
=== Usages ===
=== Predecessor ===
v1951 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v1966  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1966 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: TlabTop
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2211 
value: j2051 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1957 
=== Usages ===
=== Predecessor ===
v1950 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2211 value: j2051 stateAfter: - lastLocationAccess: - #next: v1957  <|@  <|@
f <@~|@floating>@ <|@
tid v2218 <|@
d <@d|@=== Debug Properties ===
displacement: 272
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1957 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1957 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2218 
=== Succesors ===
next: v1959 
=== Usages ===
=== Predecessor ===
v1966 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2218 #next: v1959  <|@  <|@
f <@~|@floating>@ <|@
tid v2219 <|@
d <@d|@=== Debug Properties ===
displacement: 336
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1959 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1959 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2219 
=== Succesors ===
next: v1961 
=== Usages ===
=== Predecessor ===
v1957 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2219 #next: v1961  <|@  <|@
f <@~|@floating>@ <|@
tid v2220 <|@
d <@d|@=== Debug Properties ===
displacement: 400
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1961 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1961 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2220 
=== Succesors ===
next: v1963 
=== Usages ===
=== Predecessor ===
v1959 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2220 #next: v1963  <|@  <|@
f <@~|@floating>@ <|@
tid v2221 <|@
d <@d|@=== Debug Properties ===
displacement: 464
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1963 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1963 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2221 
=== Succesors ===
next: v1969 
=== Usages ===
=== Predecessor ===
v1961 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2221 #next: v1969  <|@  <|@
f <@*|@fixed>@ <|@
tid v1969 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1968 
=== Predecessor ===
v1963 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid j1970 <|@
d <@d|@=== Debug Properties ===
stamp: i64
valueDescription: i64
=== Inputs ===
merge: v1968 
values: j1964 j1955 
=== Succesors ===
=== Usages ===
v2244 v2214 j1726 a1724 v2215 v2222 v2223 v2224 v2225 v2226 v2227 v2228 v2229 v2230 v2231 v2232 v2233 v2234 v2235 v2236 v2237 v2238 v2239 v2240 v2241 v2242 v2243 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@org.graalvm.compiler.nodes.ValuePhiNode>@ merge: v1968 values: j1964 j1955  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1968 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1969 v1971 
=== Succesors ===
next: a1724 
=== Usages ===
j1970 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@org.graalvm.compiler.nodes.MergeNode>@ stateAfter: - ends: v1969 v1971 #next: a1724  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1724 <|@
d <@d|@=== Debug Properties ===
stamp: a -
trackedPointer: true
=== Inputs ===
input: j1970 
=== Succesors ===
next: a1727 
=== Usages ===
a1754 
=== Predecessor ===
v1968 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1970 #next: a1727  <|@  <|@
f <@~|@floating>@ <|@
tid j1653 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 24
stableDimension: 0
stamp: i64 [24] ⇊0000000000000018 ⇈0000000000000018
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j1726 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j1726 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1970 
y: j1653 
=== Succesors ===
=== Usages ===
a1727 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1970 y: j1653  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1727 <|@
d <@d|@=== Debug Properties ===
stamp: a -
trackedPointer: true
=== Inputs ===
input: j1726 
=== Succesors ===
next: j1982 
=== Usages ===
a1755 a1731 
=== Predecessor ===
a1724 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1726 #next: j1982  <|@  <|@
f <@~|@floating>@ <|@
tid v1976 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<Ljava/lang/String;, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<Ljava/lang/String;, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
j1977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j1977 <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
input: v1976 
=== Succesors ===
=== Usages ===
v2213 
=== Predecessor ===
- >@ <|@
instruction <@PointerCast|@org.graalvm.compiler.hotspot.word.PointerCastNode>@ input: v1976  <|@  <|@
f <@~|@floating>@ <|@
tid v2213 <|@
d <@d|@=== Debug Properties ===
displacement: 168
scale: Times1
stamp: void*
=== Inputs ===
base: j1977 
index: - 
=== Succesors ===
=== Usages ===
j1982 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1977 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1982 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: PrototypeMarkWord
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2213 
=== Succesors ===
next: v1983 
=== Usages ===
v1983 
=== Predecessor ===
a1727 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2213 #next: v1983  <|@  <|@
f <@~|@floating>@ <|@
tid v2214 <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1983 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1983 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2214 
value: j1982 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1986 
=== Usages ===
=== Predecessor ===
j1982 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2214 value: j1982 stateAfter: - lastLocationAccess: - #next: v1986  <|@  <|@
f <@~|@floating>@ <|@
tid v2215 <|@
d <@d|@=== Debug Properties ===
displacement: 8
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1986 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2061 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 0 shift: 3)
stampKind: Klass*(compressed base: 0 shift: 3)
value: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1986 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1986 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2215 
value: v2061 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1990 
=== Usages ===
=== Predecessor ===
v1983 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2215 value: v2061 stateAfter: - lastLocationAccess: - #next: v1990  <|@  <|@
f <@~|@floating>@ <|@
tid v2222 <|@
d <@d|@=== Debug Properties ===
displacement: 12
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1990 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid a1731 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
op: Compress
stamp: n -
=== Inputs ===
value: a1727 
=== Succesors ===
=== Usages ===
v1990 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1727  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1990 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2222 
value: a1731 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1992 
=== Usages ===
=== Predecessor ===
v1986 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2222 value: a1731 stateAfter: - lastLocationAccess: - #next: v1992  <|@  <|@
f <@~|@floating>@ <|@
tid v2223 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1992 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1992 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2223 
value: i62 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1996 
=== Usages ===
=== Predecessor ===
v1990 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2223 value: i62 stateAfter: - lastLocationAccess: - #next: v1996  <|@  <|@
f <@~|@floating>@ <|@
tid v2224 <|@
d <@d|@=== Debug Properties ===
displacement: 36
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1996 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1728 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 18
stableDimension: 0
stamp: i32 [18] ⇊0000000000000012 ⇈0000000000000012
stampKind: i32
value: int[18|0x12]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1996 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1996 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2224 
value: i1728 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1997 
=== Usages ===
=== Predecessor ===
v1992 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2224 value: i1728 stateAfter: - lastLocationAccess: - #next: v1997  <|@  <|@
f <@~|@floating>@ <|@
tid v2225 <|@
d <@d|@=== Debug Properties ===
displacement: 24
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1997 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1997 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2225 
value: j1867 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2000 
=== Usages ===
=== Predecessor ===
v1996 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2225 value: j1867 stateAfter: - lastLocationAccess: - #next: v2000  <|@  <|@
f <@~|@floating>@ <|@
tid v2226 <|@
d <@d|@=== Debug Properties ===
displacement: 32
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2000 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2000 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2226 
value: v2045 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2164 
=== Usages ===
=== Predecessor ===
v1997 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2226 value: v2045 stateAfter: - lastLocationAccess: - #next: i2164  <|@  <|@
f <@~|@floating>@ <|@
tid v2183 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2164 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2164 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2183 
=== Succesors ===
next: v2004 
=== Usages ===
v2004 
=== Predecessor ===
v2000 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2183 #next: v2004  <|@  <|@
f <@~|@floating>@ <|@
tid v2227 <|@
d <@d|@=== Debug Properties ===
displacement: 40
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2004 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2004 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2227 
value: i2164 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2165 
=== Usages ===
=== Predecessor ===
i2164 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2227 value: i2164 stateAfter: - lastLocationAccess: - #next: i2165  <|@  <|@
f <@~|@floating>@ <|@
tid v2184 <|@
d <@d|@=== Debug Properties ===
displacement: 18
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2165 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2165 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2184 
=== Succesors ===
next: v2006 
=== Usages ===
v2006 
=== Predecessor ===
v2004 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2184 #next: v2006  <|@  <|@
f <@~|@floating>@ <|@
tid v2228 <|@
d <@d|@=== Debug Properties ===
displacement: 42
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2006 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2006 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2228 
value: i2165 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2166 
=== Usages ===
=== Predecessor ===
i2165 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2228 value: i2165 stateAfter: - lastLocationAccess: - #next: i2166  <|@  <|@
f <@~|@floating>@ <|@
tid v2185 <|@
d <@d|@=== Debug Properties ===
displacement: 20
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2166 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2166 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2185 
=== Succesors ===
next: v2008 
=== Usages ===
v2008 
=== Predecessor ===
v2006 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2185 #next: v2008  <|@  <|@
f <@~|@floating>@ <|@
tid v2229 <|@
d <@d|@=== Debug Properties ===
displacement: 44
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2008 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2008 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2229 
value: i2166 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2167 
=== Usages ===
=== Predecessor ===
i2166 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2229 value: i2166 stateAfter: - lastLocationAccess: - #next: i2167  <|@  <|@
f <@~|@floating>@ <|@
tid v2186 <|@
d <@d|@=== Debug Properties ===
displacement: 22
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2167 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2167 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2186 
=== Succesors ===
next: v2010 
=== Usages ===
v2010 
=== Predecessor ===
v2008 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2186 #next: v2010  <|@  <|@
f <@~|@floating>@ <|@
tid v2230 <|@
d <@d|@=== Debug Properties ===
displacement: 46
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2010 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2010 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2230 
value: i2167 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2168 
=== Usages ===
=== Predecessor ===
i2167 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2230 value: i2167 stateAfter: - lastLocationAccess: - #next: i2168  <|@  <|@
f <@~|@floating>@ <|@
tid v2187 <|@
d <@d|@=== Debug Properties ===
displacement: 24
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2168 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2168 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2187 
=== Succesors ===
next: v2012 
=== Usages ===
v2012 
=== Predecessor ===
v2010 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2187 #next: v2012  <|@  <|@
f <@~|@floating>@ <|@
tid v2231 <|@
d <@d|@=== Debug Properties ===
displacement: 48
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2012 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2012 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2231 
value: i2168 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2169 
=== Usages ===
=== Predecessor ===
i2168 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2231 value: i2168 stateAfter: - lastLocationAccess: - #next: i2169  <|@  <|@
f <@~|@floating>@ <|@
tid v2188 <|@
d <@d|@=== Debug Properties ===
displacement: 26
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2169 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2169 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2188 
=== Succesors ===
next: v2014 
=== Usages ===
v2014 
=== Predecessor ===
v2012 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2188 #next: v2014  <|@  <|@
f <@~|@floating>@ <|@
tid v2232 <|@
d <@d|@=== Debug Properties ===
displacement: 50
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2014 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2014 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2232 
value: i2169 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2170 
=== Usages ===
=== Predecessor ===
i2169 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2232 value: i2169 stateAfter: - lastLocationAccess: - #next: i2170  <|@  <|@
f <@~|@floating>@ <|@
tid v2189 <|@
d <@d|@=== Debug Properties ===
displacement: 28
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2170 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2170 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2189 
=== Succesors ===
next: v2016 
=== Usages ===
v2016 
=== Predecessor ===
v2014 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2189 #next: v2016  <|@  <|@
f <@~|@floating>@ <|@
tid v2233 <|@
d <@d|@=== Debug Properties ===
displacement: 52
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2016 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2016 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2233 
value: i2170 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2171 
=== Usages ===
=== Predecessor ===
i2170 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2233 value: i2170 stateAfter: - lastLocationAccess: - #next: i2171  <|@  <|@
f <@~|@floating>@ <|@
tid v2190 <|@
d <@d|@=== Debug Properties ===
displacement: 30
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2171 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2171 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2190 
=== Succesors ===
next: v2018 
=== Usages ===
v2018 
=== Predecessor ===
v2016 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2190 #next: v2018  <|@  <|@
f <@~|@floating>@ <|@
tid v2234 <|@
d <@d|@=== Debug Properties ===
displacement: 54
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2018 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2018 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2234 
value: i2171 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2172 
=== Usages ===
=== Predecessor ===
i2171 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2234 value: i2171 stateAfter: - lastLocationAccess: - #next: i2172  <|@  <|@
f <@~|@floating>@ <|@
tid v2191 <|@
d <@d|@=== Debug Properties ===
displacement: 32
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2172 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2172 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2191 
=== Succesors ===
next: v2020 
=== Usages ===
v2020 
=== Predecessor ===
v2018 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2191 #next: v2020  <|@  <|@
f <@~|@floating>@ <|@
tid v2235 <|@
d <@d|@=== Debug Properties ===
displacement: 56
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2020 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2020 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2235 
value: i2172 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2173 
=== Usages ===
=== Predecessor ===
i2172 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2235 value: i2172 stateAfter: - lastLocationAccess: - #next: i2173  <|@  <|@
f <@~|@floating>@ <|@
tid v2192 <|@
d <@d|@=== Debug Properties ===
displacement: 34
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2173 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2173 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2192 
=== Succesors ===
next: v2022 
=== Usages ===
v2022 
=== Predecessor ===
v2020 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2192 #next: v2022  <|@  <|@
f <@~|@floating>@ <|@
tid v2236 <|@
d <@d|@=== Debug Properties ===
displacement: 58
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2022 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2022 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2236 
value: i2173 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2174 
=== Usages ===
=== Predecessor ===
i2173 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2236 value: i2173 stateAfter: - lastLocationAccess: - #next: i2174  <|@  <|@
f <@~|@floating>@ <|@
tid v2193 <|@
d <@d|@=== Debug Properties ===
displacement: 36
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2174 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2174 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2193 
=== Succesors ===
next: v2024 
=== Usages ===
v2024 
=== Predecessor ===
v2022 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2193 #next: v2024  <|@  <|@
f <@~|@floating>@ <|@
tid v2237 <|@
d <@d|@=== Debug Properties ===
displacement: 60
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2024 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2024 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2237 
value: i2174 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2175 
=== Usages ===
=== Predecessor ===
i2174 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2237 value: i2174 stateAfter: - lastLocationAccess: - #next: i2175  <|@  <|@
f <@~|@floating>@ <|@
tid v2194 <|@
d <@d|@=== Debug Properties ===
displacement: 38
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2175 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2175 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2194 
=== Succesors ===
next: v2026 
=== Usages ===
v2026 
=== Predecessor ===
v2024 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2194 #next: v2026  <|@  <|@
f <@~|@floating>@ <|@
tid v2238 <|@
d <@d|@=== Debug Properties ===
displacement: 62
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2026 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2026 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2238 
value: i2175 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2176 
=== Usages ===
=== Predecessor ===
i2175 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2238 value: i2175 stateAfter: - lastLocationAccess: - #next: i2176  <|@  <|@
f <@~|@floating>@ <|@
tid v2195 <|@
d <@d|@=== Debug Properties ===
displacement: 40
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2176 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2176 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2195 
=== Succesors ===
next: v2028 
=== Usages ===
v2028 
=== Predecessor ===
v2026 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2195 #next: v2028  <|@  <|@
f <@~|@floating>@ <|@
tid v2239 <|@
d <@d|@=== Debug Properties ===
displacement: 64
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2028 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2028 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2239 
value: i2176 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2177 
=== Usages ===
=== Predecessor ===
i2176 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2239 value: i2176 stateAfter: - lastLocationAccess: - #next: i2177  <|@  <|@
f <@~|@floating>@ <|@
tid v2196 <|@
d <@d|@=== Debug Properties ===
displacement: 42
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2177 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2177 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2196 
=== Succesors ===
next: v2030 
=== Usages ===
v2030 
=== Predecessor ===
v2028 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2196 #next: v2030  <|@  <|@
f <@~|@floating>@ <|@
tid v2240 <|@
d <@d|@=== Debug Properties ===
displacement: 66
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2030 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2030 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2240 
value: i2177 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2178 
=== Usages ===
=== Predecessor ===
i2177 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2240 value: i2177 stateAfter: - lastLocationAccess: - #next: i2178  <|@  <|@
f <@~|@floating>@ <|@
tid v2197 <|@
d <@d|@=== Debug Properties ===
displacement: 44
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2178 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2178 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2197 
=== Succesors ===
next: v2032 
=== Usages ===
v2032 
=== Predecessor ===
v2030 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2197 #next: v2032  <|@  <|@
f <@~|@floating>@ <|@
tid v2241 <|@
d <@d|@=== Debug Properties ===
displacement: 68
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2032 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2032 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2241 
value: i2178 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2179 
=== Usages ===
=== Predecessor ===
i2178 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2241 value: i2178 stateAfter: - lastLocationAccess: - #next: i2179  <|@  <|@
f <@~|@floating>@ <|@
tid v2198 <|@
d <@d|@=== Debug Properties ===
displacement: 46
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2179 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2179 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2198 
=== Succesors ===
next: v2034 
=== Usages ===
v2034 
=== Predecessor ===
v2032 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2198 #next: v2034  <|@  <|@
f <@~|@floating>@ <|@
tid v2242 <|@
d <@d|@=== Debug Properties ===
displacement: 70
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2034 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2034 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2242 
value: i2179 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2180 
=== Usages ===
=== Predecessor ===
i2179 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2242 value: i2179 stateAfter: - lastLocationAccess: - #next: i2180  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2180 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2181 
=== Succesors ===
next: v2036 
=== Usages ===
v2036 
=== Predecessor ===
v2034 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2181 #next: v2036  <|@  <|@
f <@~|@floating>@ <|@
tid v2243 <|@
d <@d|@=== Debug Properties ===
displacement: 72
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2036 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2036 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2243 
value: i2180 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2039 
=== Usages ===
=== Predecessor ===
i2180 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2243 value: i2180 stateAfter: - lastLocationAccess: - #next: v2039  <|@  <|@
f <@~|@floating>@ <|@
tid v2244 <|@
d <@d|@=== Debug Properties ===
displacement: 74
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2039 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i2037 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 108
stableDimension: 0
stamp: i16
stampKind: i16
value: short[108|0x6c]
=== Inputs ===
=== Succesors ===
=== Usages ===
v2039 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2039 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2244 
value: i2037 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: a1754 
=== Usages ===
=== Predecessor ===
v2036 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2244 value: i2037 stateAfter: - lastLocationAccess: - #next: a1754  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1754 <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a -
=== Inputs ===
object: a1724 
=== Succesors ===
next: a1755 
=== Usages ===
v12 
=== Predecessor ===
v2039 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1724 #next: a1755  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1755 <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a -
=== Inputs ===
object: a1727 
=== Succesors ===
next: v1756 
=== Usages ===
=== Predecessor ===
a1754 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1727 #next: v1756  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1756 <|@
d <@d|@=== Debug Properties ===
barriers: 10
location: INIT_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: v12 
=== Usages ===
=== Predecessor ===
a1755 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: v12  <|@  <|@
f <@*|@fixed>@ <|@
tid v12 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
result: a1754 
memoryMap: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v1756 >@ <|@
instruction <@Return|@org.graalvm.compiler.nodes.ReturnNode>@ result: a1754 memoryMap: -  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr   -1  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v4|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v4|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: j1834 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@org.graalvm.compiler.nodes.StartNode>@ stateAfter: - #next: j1834  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1834 <|@
result r15|QWORD <|@
d <@d|@=== Debug Properties ===
directUse: true
incoming: false
register: r15
stamp: i64
=== Inputs ===
=== Succesors ===
next: j1854 
=== Usages ===
v2201 v2202 
=== Predecessor ===
v0 >@ <|@
instruction <@ReadRegister|@org.graalvm.compiler.replacements.nodes.ReadRegisterNode>@ #next: j1854  <|@  <|@
f <@~|@floating>@ <|@
tid v2201 <|@
result [r15|QWORD + 96] <|@
d <@d|@=== Debug Properties ===
displacement: 96
scale: Times1
stamp: void*
=== Inputs ===
base: j1834 
index: - 
=== Succesors ===
=== Usages ===
j1854 v1856 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1834 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1854 <|@
result v1|QWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabTop
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2201 
=== Succesors ===
next: j1855 
=== Usages ===
j2040 j1860 v2216 
=== Predecessor ===
j1834 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2201 #next: j1855  <|@  <|@
f <@~|@floating>@ <|@
tid v2202 <|@
result [r15|QWORD + 112] <|@
d <@d|@=== Debug Properties ===
displacement: 112
scale: Times1
stamp: void*
=== Inputs ===
base: j1834 
index: - 
=== Succesors ===
=== Usages ===
j1855 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1834 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1855 <|@
result v2|QWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabEnd
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2202 
=== Succesors ===
next: v1842 
=== Usages ===
v1839 
=== Predecessor ===
j1854 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2202 #next: v1842  <|@  <|@
f <@~|@floating>@ <|@
tid j1631 <|@
result long[48|0x30] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 48
stableDimension: 0
stamp: i64 [48] ⇊0000000000000030 ⇈0000000000000030
stampKind: i64
value: long[48|0x30]
=== Inputs ===
=== Succesors ===
=== Usages ===
j2040 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j2040 <|@
result v3|QWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1854 
y: j1631 
=== Succesors ===
=== Usages ===
v1839 v1856 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1854 y: j1631  <|@  <|@
f <@~|@floating>@ <|@
tid v1839 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: org.graalvm.compiler.nodes.calc.IntegerBelowNode$BelowOp@6e623cd0
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j1855 
y: j2040 
=== Succesors ===
=== Usages ===
v1842 
=== Predecessor ===
- >@ <|@
instruction <@|<||@org.graalvm.compiler.nodes.calc.IntegerBelowNode>@ x: j1855 y: j2040  <|@  <|@
f <@~|@floating>@ <|@
tid i418 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i32 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
?1155 a1847 a1954 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1832 <|@
result v4|QWORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<[I, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<[I, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
a1847 a1954 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a! Lbench/StringOp;
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@org.graalvm.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
code: ResolvedJavaMethodBytecode<StringOp.appendCont()>
duringCall: false
localsSize: 2
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 147
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: a1 - 
=== Succesors ===
=== Usages ===
a1847 a1907 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: a1 -  <|@  <|@
f <@*|@fixed>@ <|@
tid v1842 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.010000000000000009
=== Inputs ===
condition: v1839 
=== Succesors ===
trueSuccessor: v1840 
falseSuccessor: v1841 
=== Usages ===
=== Predecessor ===
j1855 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v1839 #trueSuccessor: v1840 #falseSuccessor: v1841  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1840 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: a1847 
=== Usages ===
=== Predecessor ===
v1842 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: a1847  <|@  <|@
f <@~|@floating>@ <|@
tid i2042 <|@
result int[8|0x8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8] ⇊0000000000000008 ⇈0000000000000008
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
a1847 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1847 <|@
result v5|QWORD[.] <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: new_array(KlassPointer,int,boolean)Object
foreignCalls: org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider@52a1ad47
stamp: a! Ljava/lang/Object;
=== Inputs ===
stateAfter: - 
stateDuring: ?2 
arguments: v1832 i2042 i418 
=== Succesors ===
next: j1848 
=== Usages ===
j1848 
=== Predecessor ===
v1840 >@ <|@
instruction <@ForeignCall|@org.graalvm.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: ?2 arguments: v1832 i2042 i418 #next: j1848  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1848 <|@
result v5|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: i64
trackedPointer: true
=== Inputs ===
input: a1847 
=== Succesors ===
next: v1861 
=== Usages ===
j1860 
=== Predecessor ===
a1847 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: a1847 #next: v1861  <|@  <|@
f <@*|@fixed>@ <|@
tid v1861 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1858 
=== Predecessor ===
j1848 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v4|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1841 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v1856 
=== Usages ===
=== Predecessor ===
v1842 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v1856  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1856 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: TlabTop
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2201 
value: j2040 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1852 
=== Usages ===
=== Predecessor ===
v1841 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2201 value: j2040 stateAfter: - lastLocationAccess: - #next: v1852  <|@  <|@
f <@~|@floating>@ <|@
tid v2216 <|@
result [v1|QWORD + 240] <|@
d <@d|@=== Debug Properties ===
displacement: 240
scale: Times1
stamp: void*
=== Inputs ===
base: j1854 
index: - 
=== Succesors ===
=== Usages ===
v1852 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1854 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1852 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2216 
=== Succesors ===
next: v1859 
=== Usages ===
=== Predecessor ===
v1856 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2216 #next: v1859  <|@  <|@
f <@*|@fixed>@ <|@
tid v1859 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1858 
=== Predecessor ===
v1852 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid j1860 <|@
result v6|QWORD[*] <|@
d <@d|@=== Debug Properties ===
stamp: i64
valueDescription: i64
=== Inputs ===
merge: v1858 
values: j1854 j1848 
=== Succesors ===
=== Usages ===
v2205 v2204 a1703 v2203 v2217 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@org.graalvm.compiler.nodes.ValuePhiNode>@ merge: v1858 values: j1854 j1848  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1858 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1859 v1861 
=== Succesors ===
next: a1703 
=== Usages ===
j1860 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@org.graalvm.compiler.nodes.MergeNode>@ stateAfter: - ends: v1859 v1861 #next: a1703  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1703 <|@
result v7|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: a -
trackedPointer: true
=== Inputs ===
input: j1860 
=== Succesors ===
next: v1872 
=== Usages ===
a1720 
=== Predecessor ===
v1858 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1860 #next: v1872  <|@  <|@
f <@~|@floating>@ <|@
tid v2203 <|@
result [v6|QWORD[*] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1872 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1156 <|@
result int[16|0x10] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16] ⇊0000000000000010 ⇈0000000000000010
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1872 a1954 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1872 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2203 
value: i1156 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1873 
=== Usages ===
=== Predecessor ===
a1703 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2203 value: i1156 stateAfter: - lastLocationAccess: - #next: v1873  <|@  <|@
f <@~|@floating>@ <|@
tid v2204 <|@
result [v6|QWORD[*]] <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1873 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j1867 <|@
result long[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i64 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i64
value: long[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1873 v1931 v1997 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1873 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2204 
value: j1867 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1877 
=== Usages ===
=== Predecessor ===
v1872 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2204 value: j1867 stateAfter: - lastLocationAccess: - #next: v1877  <|@  <|@
f <@~|@floating>@ <|@
tid v2205 <|@
result [v6|QWORD[*] + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1877 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2045 <|@
result meta{HotSpotType<[C, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<[C, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 0 shift: 3)
stampKind: Klass*(compressed base: 0 shift: 3)
value: meta{HotSpotType<[C, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1877 v1934 v2000 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1877 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2205 
value: v2045 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1882 
=== Usages ===
=== Predecessor ===
v1873 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2205 value: v2045 stateAfter: - lastLocationAccess: - #next: v1882  <|@  <|@
f <@~|@floating>@ <|@
tid v2217 <|@
result [v6|QWORD[*] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: j1860 
index: - 
=== Succesors ===
=== Usages ===
v1882 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1860 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v1880 <|@
result v8|V256_QWORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: <28147922879250529,29273839966224485,30399757053198441,29836811394809962>
stableDimension: 0
stamp: <i64,i64,i64,i64>
stampKind: <i64,i64,i64,i64>
value: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962>
=== Inputs ===
=== Succesors ===
=== Usages ===
v1882 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1882 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2217 
value: v1880 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: a1720 
=== Usages ===
=== Predecessor ===
v1877 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2217 value: v1880 stateAfter: - lastLocationAccess: - #next: a1720  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1720 <|@
result v7|QWORD[.] <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a -
=== Inputs ===
object: a1703 
=== Succesors ===
next: v1721 
=== Usages ===
v2199 
=== Predecessor ===
v1882 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1703 #next: v1721  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1721 <|@
d <@d|@=== Debug Properties ===
barriers: 8
location: INIT_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: j1886 
=== Usages ===
=== Predecessor ===
a1720 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: j1886  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1886 <|@
result r15|QWORD <|@
d <@d|@=== Debug Properties ===
directUse: true
incoming: false
register: r15
stamp: i64
=== Inputs ===
=== Succesors ===
next: j1927 
=== Usages ===
v2206 v2207 
=== Predecessor ===
v1721 >@ <|@
instruction <@ReadRegister|@org.graalvm.compiler.replacements.nodes.ReadRegisterNode>@ #next: j1927  <|@  <|@
f <@~|@floating>@ <|@
tid v2206 <|@
result [r15|QWORD + 96] <|@
d <@d|@=== Debug Properties ===
displacement: 96
scale: Times1
stamp: void*
=== Inputs ===
base: j1886 
index: - 
=== Succesors ===
=== Usages ===
j1927 v1929 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1886 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1927 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabTop
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2206 
=== Succesors ===
next: j1928 
=== Usages ===
j2107 v2208 v2209 a1906 v2210 v2245 v2246 v2247 v2248 
=== Predecessor ===
j1886 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2206 #next: j1928  <|@  <|@
f <@~|@floating>@ <|@
tid v2207 <|@
result [r15|QWORD + 112] <|@
d <@d|@=== Debug Properties ===
displacement: 112
scale: Times1
stamp: void*
=== Inputs ===
base: j1886 
index: - 
=== Succesors ===
=== Usages ===
j1928 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1886 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1928 <|@
result INTERIOR_MATCH <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabEnd
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2207 
=== Succesors ===
next: v1902 
=== Usages ===
v1896 
=== Predecessor ===
j1927 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2207 #next: v1902  <|@  <|@
f <@~|@floating>@ <|@
tid j2106 <|@
result long[88|0x58] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 88
stableDimension: 0
stamp: i64 [88] ⇊0000000000000058 ⇈0000000000000058
stampKind: i64
value: long[88|0x58]
=== Inputs ===
=== Succesors ===
=== Usages ===
j2107 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j2107 <|@
result v10|QWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1927 
y: j2106 
=== Succesors ===
=== Usages ===
v1896 v1929 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1927 y: j2106  <|@  <|@
f <@~|@floating>@ <|@
tid v1896 <|@
result INTERIOR_MATCH <|@
d <@d|@=== Debug Properties ===
condition: BT
op: org.graalvm.compiler.nodes.calc.IntegerBelowNode$BelowOp@6e623cd0
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j1928 
y: j2107 
=== Succesors ===
=== Usages ===
v1902 
=== Predecessor ===
- >@ <|@
instruction <@|<||@org.graalvm.compiler.nodes.calc.IntegerBelowNode>@ x: j1928 y: j2107  <|@  <|@
f <@~|@floating>@ <|@
tid i62 <|@
result int[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 0
stableDimension: 0
stamp: i32 [0] ⇈0000000000000000
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1992 a1907 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i1340 <|@
result int[34|0x22] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 34
stableDimension: 0
stamp: i32 [34] ⇊0000000000000022 ⇈0000000000000022
stampKind: i32
value: int[34|0x22]
=== Inputs ===
=== Succesors ===
=== Usages ===
a1907 v1930 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1902 <|@
result org.graalvm.compiler.core.match.ComplexMatchValue@9c339a93 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.010000000000000009
=== Inputs ===
condition: v1896 
=== Succesors ===
trueSuccessor: v1901 
falseSuccessor: v1900 
=== Usages ===
=== Predecessor ===
j1928 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v1896 #trueSuccessor: v1901 #falseSuccessor: v1900  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1901 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: a1907 
=== Usages ===
=== Predecessor ===
v1902 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: a1907  <|@  <|@
f <@~|@floating>@ <|@
tid v1866 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<[C, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<[C, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
a1907 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1907 <|@
result v12|QWORD[.] <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: new_array(KlassPointer,int,boolean)Object
foreignCalls: org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider@52a1ad47
stamp: a! Ljava/lang/Object;
=== Inputs ===
stateAfter: - 
stateDuring: ?2 
arguments: v1866 i1340 i62 
=== Succesors ===
next: v1910 
=== Usages ===
a1911 
=== Predecessor ===
v1901 >@ <|@
instruction <@ForeignCall|@org.graalvm.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: ?2 arguments: v1866 i1340 i62 #next: v1910  <|@  <|@
f <@*|@fixed>@ <|@
tid v1910 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1909 
=== Predecessor ===
a1907 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1900 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v1929 
=== Usages ===
=== Predecessor ===
v1902 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v1929  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1929 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: TlabTop
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2206 
value: j2107 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1917 
=== Usages ===
=== Predecessor ===
v1900 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2206 value: j2107 stateAfter: - lastLocationAccess: - #next: v1917  <|@  <|@
f <@~|@floating>@ <|@
tid v2245 <|@
result [v9|QWORD + 280] <|@
d <@d|@=== Debug Properties ===
displacement: 280
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1917 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1917 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2245 
=== Succesors ===
next: v1919 
=== Usages ===
=== Predecessor ===
v1929 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2245 #next: v1919  <|@  <|@
f <@~|@floating>@ <|@
tid v2246 <|@
result [v9|QWORD + 344] <|@
d <@d|@=== Debug Properties ===
displacement: 344
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1919 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1919 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2246 
=== Succesors ===
next: v1922 
=== Usages ===
=== Predecessor ===
v1917 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2246 #next: v1922  <|@  <|@
f <@~|@floating>@ <|@
tid v2247 <|@
result [v9|QWORD + 408] <|@
d <@d|@=== Debug Properties ===
displacement: 408
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1922 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1922 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2247 
=== Succesors ===
next: v1925 
=== Usages ===
=== Predecessor ===
v1919 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2247 #next: v1925  <|@  <|@
f <@~|@floating>@ <|@
tid v2248 <|@
result [v9|QWORD + 472] <|@
d <@d|@=== Debug Properties ===
displacement: 472
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1925 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1925 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2248 
=== Succesors ===
next: v1930 
=== Usages ===
=== Predecessor ===
v1922 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2248 #next: v1930  <|@  <|@
f <@~|@floating>@ <|@
tid v2208 <|@
result [v9|QWORD + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1930 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1930 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2208 
value: i1340 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1931 
=== Usages ===
=== Predecessor ===
v1925 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2208 value: i1340 stateAfter: - lastLocationAccess: - #next: v1931  <|@  <|@
f <@~|@floating>@ <|@
tid v2209 <|@
result [v9|QWORD] <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1931 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1931 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2209 
value: j1867 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1934 
=== Usages ===
=== Predecessor ===
v1930 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2209 value: j1867 stateAfter: - lastLocationAccess: - #next: v1934  <|@  <|@
f <@~|@floating>@ <|@
tid v2210 <|@
result [v9|QWORD + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
scale: Times1
stamp: void*
=== Inputs ===
base: j1927 
index: - 
=== Succesors ===
=== Usages ===
v1934 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1927 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1934 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2210 
value: v2045 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1905 
=== Usages ===
=== Predecessor ===
v1931 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2210 value: v2045 stateAfter: - lastLocationAccess: - #next: v1905  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1905 <|@
d <@d|@=== Debug Properties ===
barriers: 8
location: INIT_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: a1906 
=== Usages ===
=== Predecessor ===
v1934 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: a1906  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1906 <|@
result v13|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: a! -
trackedPointer: true
=== Inputs ===
input: j1927 
=== Succesors ===
next: v1908 
=== Usages ===
a1911 
=== Predecessor ===
v1905 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1927 #next: v1908  <|@  <|@
f <@*|@fixed>@ <|@
tid v1908 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1909 
=== Predecessor ===
a1906 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid a1911 <|@
result v14|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: a! -
valueDescription: a -
=== Inputs ===
merge: v1909 
values: a1906 a1907 
=== Succesors ===
=== Usages ===
v2249 a1817 v2200 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@org.graalvm.compiler.nodes.ValuePhiNode>@ merge: v1909 values: a1906 a1907  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1909 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1908 v1910 
=== Succesors ===
next: v2139 
=== Usages ===
a1911 v2163 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@org.graalvm.compiler.nodes.MergeNode>@ stateAfter: - ends: v1908 v1910 #next: v2139  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2139 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
anchored: - 
=== Succesors ===
next: v2163 
=== Usages ===
j2140 j2141 
=== Predecessor ===
v1909 >@ <|@
instruction <@ValueAnchor|@org.graalvm.compiler.nodes.extended.ValueAnchorNode>@ anchored: - #next: v2163  <|@  <|@
f <@~|@floating>@ <|@
tid v2199 <|@
result [v7|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1720 
index: - 
=== Succesors ===
=== Usages ===
j2140 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1720 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j2140 <|@
result v15|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
anchor: v2139 
address: v2199 
=== Succesors ===
=== Usages ===
v2251 
=== Predecessor ===
- >@ <|@
instruction <@d|@com.oracle.graal.enterprise.n.d>@ anchor: v2139 address: v2199  <|@  <|@
f <@~|@floating>@ <|@
tid v2251 <|@
result [v15|QWORD[.]] <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j2140 
index: - 
=== Succesors ===
=== Usages ===
v2163 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2140 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2163 <|@
result v16|V256_WORD <|@
d <@d|@=== Debug Properties ===
barrierType: PRECISE
forceFixed: false
location: Array: char
nullCheck: false
stamp: <i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16>
=== Inputs ===
stateBefore: - 
guard: v1909 
address: v2251 
=== Succesors ===
next: v2156 
=== Usages ===
v2156 
=== Predecessor ===
v2139 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: v1909 address: v2251 #next: v2156  <|@  <|@
f <@~|@floating>@ <|@
tid v2200 <|@
result [v14|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1911 
index: - 
=== Succesors ===
=== Usages ===
j2141 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1911 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j2141 <|@
result v17|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
anchor: v2139 
address: v2200 
=== Succesors ===
=== Usages ===
v2250 
=== Predecessor ===
- >@ <|@
instruction <@d|@com.oracle.graal.enterprise.n.d>@ anchor: v2139 address: v2200  <|@  <|@
f <@~|@floating>@ <|@
tid v2250 <|@
result [v17|QWORD[.]] <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j2141 
index: - 
=== Succesors ===
=== Usages ===
v2156 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2141 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2156 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: VectorInitialization
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2250 
value: v2163 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2147 
=== Usages ===
=== Predecessor ===
v2163 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2250 value: v2163 stateAfter: - lastLocationAccess: - #next: v2147  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2147 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
anchored: - 
=== Succesors ===
next: v2158 
=== Usages ===
j2148 
=== Predecessor ===
v2156 >@ <|@
instruction <@ValueAnchor|@org.graalvm.compiler.nodes.extended.ValueAnchorNode>@ anchored: - #next: v2158  <|@  <|@
f <@~|@floating>@ <|@
tid v2249 <|@
result [v14|QWORD[.] + 48] <|@
d <@d|@=== Debug Properties ===
displacement: 48
scale: Times1
stamp: void*
=== Inputs ===
base: a1911 
index: - 
=== Succesors ===
=== Usages ===
j2148 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1911 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid j2148 <|@
result v18|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
anchor: v2147 
address: v2249 
=== Succesors ===
=== Usages ===
v2252 v2253 
=== Predecessor ===
- >@ <|@
instruction <@d|@com.oracle.graal.enterprise.n.d>@ anchor: v2147 address: v2249  <|@  <|@
f <@~|@floating>@ <|@
tid v2252 <|@
result [v18|QWORD[.]] <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j2148 
index: - 
=== Succesors ===
=== Usages ===
v2158 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2148 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2161 <|@
result v19|V256_WORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: <0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>
stableDimension: 0
stamp: <i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000>
stampKind: <i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16,i16>
value: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>
=== Inputs ===
=== Succesors ===
=== Usages ===
v2158 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2158 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: VectorInitialization
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2252 
value: v2161 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2160 
=== Usages ===
=== Predecessor ===
v2147 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2252 value: v2161 stateAfter: - lastLocationAccess: - #next: v2160  <|@  <|@
f <@~|@floating>@ <|@
tid v2253 <|@
result [v18|QWORD[.] + 32] <|@
d <@d|@=== Debug Properties ===
displacement: 32
scale: Times1
stamp: void*
=== Inputs ===
base: j2148 
index: - 
=== Succesors ===
=== Usages ===
v2160 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j2148 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2162 <|@
result v20|V32_WORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: <0,0>
stableDimension: 0
stamp: <i16 [0] ⇈0000000000000000,i16 [0] ⇈0000000000000000>
stampKind: <i16,i16>
value: SIMD<0,0>
=== Inputs ===
=== Succesors ===
=== Usages ===
v2160 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2160 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: VectorInitialization
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2253 
value: v2162 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: a1817 
=== Usages ===
=== Predecessor ===
v2158 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2253 value: v2162 stateAfter: - lastLocationAccess: - #next: a1817  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1817 <|@
result v14|QWORD[.] <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a! -
=== Inputs ===
object: a1911 
=== Succesors ===
next: v1460 
=== Usages ===
v2196 v2182 v2198 v2197 ?1358 v2181 v2183 v2184 v2185 v2186 v2187 v2188 v2189 v2190 v2191 v2192 v2193 v2194 v2195 
=== Predecessor ===
v2160 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1911 #next: v1460  <|@  <|@
f <@~|@floating>@ <|@
tid v2181 <|@
result [v14|QWORD[.] + 48] <|@
d <@d|@=== Debug Properties ===
displacement: 48
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
v1460 i2180 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1632 <|@
result int[107|0x6b] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 107
stableDimension: 0
stamp: i16 [107] ⇊000000000000006b ⇈000000000000006b
stampKind: i16
value: int[107|0x6b]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1460 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1460 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Array: char
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2181 
value: i1632 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1512 
=== Usages ===
=== Predecessor ===
a1817 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2181 value: i1632 stateAfter: - lastLocationAccess: - #next: v1512  <|@  <|@
f <@~|@floating>@ <|@
tid v2182 <|@
result [v14|QWORD[.] + 50] <|@
d <@d|@=== Debug Properties ===
displacement: 50
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
v1512 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1640 <|@
result int[108|0x6c] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 108
stableDimension: 0
stamp: i16 [108] ⇊000000000000006c ⇈000000000000006c
stampKind: i16
value: int[108|0x6c]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1512 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1512 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Array: char
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2182 
value: i1640 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: j1943 
=== Usages ===
=== Predecessor ===
v1460 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2182 value: i1640 stateAfter: - lastLocationAccess: - #next: j1943  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1943 <|@
result r15|QWORD <|@
d <@d|@=== Debug Properties ===
directUse: true
incoming: false
register: r15
stamp: i64
=== Inputs ===
=== Succesors ===
next: j1964 
=== Usages ===
v2211 v2212 
=== Predecessor ===
v1512 >@ <|@
instruction <@ReadRegister|@org.graalvm.compiler.replacements.nodes.ReadRegisterNode>@ #next: j1964  <|@  <|@
f <@~|@floating>@ <|@
tid v2211 <|@
result [r15|QWORD + 96] <|@
d <@d|@=== Debug Properties ===
displacement: 96
scale: Times1
stamp: void*
=== Inputs ===
base: j1943 
index: - 
=== Succesors ===
=== Usages ===
j1964 v1966 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1943 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1964 <|@
result v21|QWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabTop
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2211 
=== Succesors ===
next: j1965 
=== Usages ===
j2051 j1970 v2218 v2219 v2220 v2221 
=== Predecessor ===
j1943 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2211 #next: j1965  <|@  <|@
f <@~|@floating>@ <|@
tid v2212 <|@
result [r15|QWORD + 112] <|@
d <@d|@=== Debug Properties ===
displacement: 112
scale: Times1
stamp: void*
=== Inputs ===
base: j1943 
index: - 
=== Succesors ===
=== Usages ===
j1965 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1943 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1965 <|@
result INTERIOR_MATCH <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: TlabEnd
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2212 
=== Succesors ===
next: v1951 
=== Usages ===
v1948 
=== Predecessor ===
j1964 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2212 #next: v1951  <|@  <|@
f <@~|@floating>@ <|@
tid j2050 <|@
result long[80|0x50] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 80
stableDimension: 0
stamp: i64 [80] ⇊0000000000000050 ⇈0000000000000050
stampKind: i64
value: long[80|0x50]
=== Inputs ===
=== Succesors ===
=== Usages ===
j2051 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j2051 <|@
result v22|QWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1964 
y: j2050 
=== Succesors ===
=== Usages ===
v1948 v1966 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1964 y: j2050  <|@  <|@
f <@~|@floating>@ <|@
tid v1948 <|@
result INTERIOR_MATCH <|@
d <@d|@=== Debug Properties ===
condition: BT
op: org.graalvm.compiler.nodes.calc.IntegerBelowNode$BelowOp@6e623cd0
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j1965 
y: j2051 
=== Succesors ===
=== Usages ===
v1951 
=== Predecessor ===
- >@ <|@
instruction <@|<||@org.graalvm.compiler.nodes.calc.IntegerBelowNode>@ x: j1965 y: j2051  <|@  <|@
f <@*|@fixed>@ <|@
tid v1951 <|@
result org.graalvm.compiler.core.match.ComplexMatchValue@9c339a93 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.010000000000000009
=== Inputs ===
condition: v1948 
=== Succesors ===
trueSuccessor: v1949 
falseSuccessor: v1950 
=== Usages ===
=== Predecessor ===
j1965 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v1948 #trueSuccessor: v1949 #falseSuccessor: v1950  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1949 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: a1954 
=== Usages ===
=== Predecessor ===
v1951 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: a1954  <|@  <|@
tid ?61 <|@
d <@d|@=== Debug Properties ===
bci: 17
code: ResolvedJavaMethodBytecode<StringOp.appendCont()>
duringCall: true
localsSize: 2
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 149
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: - - 
=== Succesors ===
=== Usages ===
?403 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: - -  <|@  <|@
tid a64 <|@
d <@d|@=== Debug Properties ===
fields: [Ljdk.vm.ci.hotspot.HotSpotResolvedJavaField;@13d38966
hasIdentity: true
objectId: -1
stamp: a!# Ljava/lang/StringBuffer;
type: HotSpotType<Ljava/lang/StringBuffer;, resolved>
=== Inputs ===
=== Succesors ===
=== Usages ===
?693 ?166 ?1155 ?166 ?403 ?693 ?1358 
=== Predecessor ===
- >@ <|@
instruction <@VirtualInstance|@org.graalvm.compiler.nodes.virtual.VirtualInstanceNode>@  <|@  <|@
tid ?166 <|@
d <@d|@=== Debug Properties ===
=== Inputs ===
object: a64 
materializedValue: a64 
=== Succesors ===
=== Usages ===
?403 
=== Predecessor ===
- >@ <|@
instruction <@MaterializedObjectState|@org.graalvm.compiler.virtual.nodes.MaterializedObjectState>@ object: a64 materializedValue: a64  <|@  <|@
tid ?403 <|@
d <@d|@=== Debug Properties ===
bci: 115
code: ResolvedJavaMethodBytecode<StringOp.cont(StringBuffer)>
duringCall: true
localsSize: 2
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 169
stackSize: 0
=== Inputs ===
outerFrameState: ?61 
values: - a64 
virtualObjectMappings: ?166 
=== Succesors ===
=== Usages ===
?693 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?61 values: - a64 virtualObjectMappings: ?166  <|@  <|@
tid v392 <|@
d <@d|@=== Debug Properties ===
eliminated: false
lockDepth: 0
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
?693 
=== Predecessor ===
- >@ <|@
instruction <@MonitorId|@org.graalvm.compiler.nodes.java.MonitorIdNode>@  <|@  <|@
tid ?693 <|@
d <@d|@=== Debug Properties ===
bci: 7
code: ResolvedJavaMethodBytecode<StringBuffer.append(String)>
duringCall: true
localsSize: 2
locksSize: 1
rethrowException: false
sourceFile: StringBuffer.java
sourceLine: 270
stackSize: 0
=== Inputs ===
outerFrameState: ?403 
values: a64 - a64 
monitorIds: v392 
=== Succesors ===
=== Usages ===
?1155 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?403 values: a64 - a64 monitorIds: v392  <|@  <|@
tid ?1155 <|@
d <@d|@=== Debug Properties ===
bci: 35
code: ResolvedJavaMethodBytecode<AbstractStringBuilder.append(String)>
duringCall: true
localsSize: 3
locksSize: 0
rethrowException: false
sourceFile: AbstractStringBuilder.java
sourceLine: 449
stackSize: 0
=== Inputs ===
outerFrameState: ?693 
values: a64 - i418 
=== Succesors ===
=== Usages ===
?1153 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?693 values: a64 - i418  <|@  <|@
f <@~|@floating>@ <|@
tid i1268 <|@
result int[17|0x11] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 17
stableDimension: 0
stamp: i32 [17] ⇊0000000000000011 ⇈0000000000000011
stampKind: i32
value: int[17|0x11]
=== Inputs ===
=== Succesors ===
=== Usages ===
?1358 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
tid ?1358 <|@
d <@d|@=== Debug Properties ===
=== Inputs ===
object: a64 
values: i1268 a1817 - 
=== Succesors ===
=== Usages ===
?1153 
=== Predecessor ===
- >@ <|@
instruction <@VirtualObjectState|@org.graalvm.compiler.virtual.nodes.VirtualObjectState>@ object: a64 values: i1268 a1817 -  <|@  <|@
tid ?1153 <|@
d <@d|@=== Debug Properties ===
bci: 61
code: ResolvedJavaMethodBytecode<String.getChars(int, int, char[], int)>
duringCall: false
localsSize: 5
locksSize: 0
rethrowException: false
sourceFile: String.java
sourceLine: 827
stackSize: 0
=== Inputs ===
outerFrameState: ?1155 
values: - - - - - 
virtualObjectMappings: ?1358 
=== Succesors ===
=== Usages ===
a1954 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: ?1155 values: - - - - - virtualObjectMappings: ?1358  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1954 <|@
result v23|QWORD[.] <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: new_array(KlassPointer,int,boolean)Object
foreignCalls: org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider@52a1ad47
stamp: a! Ljava/lang/Object;
=== Inputs ===
stateAfter: - 
stateDuring: ?1153 
arguments: v1832 i1156 i418 
=== Succesors ===
next: j1955 
=== Usages ===
j1955 
=== Predecessor ===
v1949 >@ <|@
instruction <@ForeignCall|@org.graalvm.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: ?1153 arguments: v1832 i1156 i418 #next: j1955  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1955 <|@
result v23|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: i64
trackedPointer: true
=== Inputs ===
input: a1954 
=== Succesors ===
next: v1971 
=== Usages ===
j1970 
=== Predecessor ===
a1954 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: a1954 #next: v1971  <|@  <|@
f <@*|@fixed>@ <|@
tid v1971 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1968 
=== Predecessor ===
j1955 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v4|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v1950 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v1966 
=== Usages ===
=== Predecessor ===
v1951 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v1966  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1966 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: TlabTop
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2211 
value: j2051 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1957 
=== Usages ===
=== Predecessor ===
v1950 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2211 value: j2051 stateAfter: - lastLocationAccess: - #next: v1957  <|@  <|@
f <@~|@floating>@ <|@
tid v2218 <|@
result [v21|QWORD + 272] <|@
d <@d|@=== Debug Properties ===
displacement: 272
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1957 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1957 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2218 
=== Succesors ===
next: v1959 
=== Usages ===
=== Predecessor ===
v1966 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2218 #next: v1959  <|@  <|@
f <@~|@floating>@ <|@
tid v2219 <|@
result [v21|QWORD + 336] <|@
d <@d|@=== Debug Properties ===
displacement: 336
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1959 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1959 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2219 
=== Succesors ===
next: v1961 
=== Usages ===
=== Predecessor ===
v1957 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2219 #next: v1961  <|@  <|@
f <@~|@floating>@ <|@
tid v2220 <|@
result [v21|QWORD + 400] <|@
d <@d|@=== Debug Properties ===
displacement: 400
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1961 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1961 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2220 
=== Succesors ===
next: v1963 
=== Usages ===
=== Predecessor ===
v1959 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2220 #next: v1963  <|@  <|@
f <@~|@floating>@ <|@
tid v2221 <|@
result [v21|QWORD + 464] <|@
d <@d|@=== Debug Properties ===
displacement: 464
scale: Times1
stamp: void*
=== Inputs ===
base: j1964 
index: - 
=== Succesors ===
=== Usages ===
v1963 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1964 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1963 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
address: v2221 
=== Succesors ===
next: v1969 
=== Usages ===
=== Predecessor ===
v1961 >@ <|@
instruction <@PrefetchAllocate|@org.graalvm.compiler.nodes.PrefetchAllocateNode>@ address: v2221 #next: v1969  <|@  <|@
f <@*|@fixed>@ <|@
tid v1969 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v1968 
=== Predecessor ===
v1963 >@ <|@
instruction <@EndNode|@org.graalvm.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid j1970 <|@
result v24|QWORD[*] <|@
d <@d|@=== Debug Properties ===
stamp: i64
valueDescription: i64
=== Inputs ===
merge: v1968 
values: j1964 j1955 
=== Succesors ===
=== Usages ===
v2244 v2214 j1726 a1724 v2215 v2222 v2223 v2224 v2225 v2226 v2227 v2228 v2229 v2230 v2231 v2232 v2233 v2234 v2235 v2236 v2237 v2238 v2239 v2240 v2241 v2242 v2243 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@org.graalvm.compiler.nodes.ValuePhiNode>@ merge: v1968 values: j1964 j1955  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1968 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1969 v1971 
=== Succesors ===
next: a1724 
=== Usages ===
j1970 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@org.graalvm.compiler.nodes.MergeNode>@ stateAfter: - ends: v1969 v1971 #next: a1724  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1724 <|@
result v25|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: a -
trackedPointer: true
=== Inputs ===
input: j1970 
=== Succesors ===
next: a1727 
=== Usages ===
a1754 
=== Predecessor ===
v1968 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1970 #next: a1727  <|@  <|@
f <@~|@floating>@ <|@
tid j1653 <|@
result long[24|0x18] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 24
stableDimension: 0
stamp: i64 [24] ⇊0000000000000018 ⇈0000000000000018
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j1726 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j1726 <|@
result v26|QWORD[*] <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/756915010@476198a6
stamp: i64
=== Inputs ===
x: j1970 
y: j1653 
=== Succesors ===
=== Usages ===
a1727 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j1970 y: j1653  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1727 <|@
result v27|QWORD[.] <|@
d <@d|@=== Debug Properties ===
stamp: a -
trackedPointer: true
=== Inputs ===
input: j1726 
=== Succesors ===
next: j1982 
=== Usages ===
a1755 a1731 
=== Predecessor ===
a1724 >@ <|@
instruction <@WordCast|@org.graalvm.compiler.word.WordCastNode>@ input: j1726 #next: j1982  <|@  <|@
f <@~|@floating>@ <|@
tid v1976 <|@
result v28|QWORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<Ljava/lang/String;, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<Ljava/lang/String;, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
j1977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j1977 <|@
result v28|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
input: v1976 
=== Succesors ===
=== Usages ===
v2213 
=== Predecessor ===
- >@ <|@
instruction <@PointerCast|@org.graalvm.compiler.hotspot.word.PointerCastNode>@ input: v1976  <|@  <|@
f <@~|@floating>@ <|@
tid v2213 <|@
result [v28|QWORD + 168] <|@
d <@d|@=== Debug Properties ===
displacement: 168
scale: Times1
stamp: void*
=== Inputs ===
base: j1977 
index: - 
=== Succesors ===
=== Usages ===
j1982 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1977 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j1982 <|@
result v29|QWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: true
location: PrototypeMarkWord
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v2213 
=== Succesors ===
next: v1983 
=== Usages ===
v1983 
=== Predecessor ===
a1727 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2213 #next: v1983  <|@  <|@
f <@~|@floating>@ <|@
tid v2214 <|@
result [v24|QWORD[*]] <|@
d <@d|@=== Debug Properties ===
displacement: 0
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1983 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1983 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2214 
value: j1982 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1986 
=== Usages ===
=== Predecessor ===
j1982 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2214 value: j1982 stateAfter: - lastLocationAccess: - #next: v1986  <|@  <|@
f <@~|@floating>@ <|@
tid v2215 <|@
result [v24|QWORD[*] + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1986 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid v2061 <|@
result meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 0 shift: 3)
stampKind: Klass*(compressed base: 0 shift: 3)
value: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1986 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1986 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2215 
value: v2061 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1990 
=== Usages ===
=== Predecessor ===
v1983 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2215 value: v2061 stateAfter: - lastLocationAccess: - #next: v1990  <|@  <|@
f <@~|@floating>@ <|@
tid v2222 <|@
result [v24|QWORD[*] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1990 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid a1731 <|@
result v30|DWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
op: Compress
stamp: n -
=== Inputs ===
value: a1727 
=== Succesors ===
=== Usages ===
v1990 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@org.graalvm.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1727  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1990 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2222 
value: a1731 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1992 
=== Usages ===
=== Predecessor ===
v1986 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2222 value: a1731 stateAfter: - lastLocationAccess: - #next: v1992  <|@  <|@
f <@~|@floating>@ <|@
tid v2223 <|@
result [v24|QWORD[*] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1992 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1992 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2223 
value: i62 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1996 
=== Usages ===
=== Predecessor ===
v1990 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2223 value: i62 stateAfter: - lastLocationAccess: - #next: v1996  <|@  <|@
f <@~|@floating>@ <|@
tid v2224 <|@
result [v24|QWORD[*] + 36] <|@
d <@d|@=== Debug Properties ===
displacement: 36
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1996 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i1728 <|@
result int[18|0x12] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 18
stableDimension: 0
stamp: i32 [18] ⇊0000000000000012 ⇈0000000000000012
stampKind: i32
value: int[18|0x12]
=== Inputs ===
=== Succesors ===
=== Usages ===
v1996 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1996 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2224 
value: i1728 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v1997 
=== Usages ===
=== Predecessor ===
v1992 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2224 value: i1728 stateAfter: - lastLocationAccess: - #next: v1997  <|@  <|@
f <@~|@floating>@ <|@
tid v2225 <|@
result [v24|QWORD[*] + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v1997 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1997 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: MarkWord
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2225 
value: j1867 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2000 
=== Usages ===
=== Predecessor ===
v1996 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2225 value: j1867 stateAfter: - lastLocationAccess: - #next: v2000  <|@  <|@
f <@~|@floating>@ <|@
tid v2226 <|@
result [v24|QWORD[*] + 32] <|@
d <@d|@=== Debug Properties ===
displacement: 32
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2000 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2000 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: Hub:write
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2226 
value: v2045 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2164 
=== Usages ===
=== Predecessor ===
v1997 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2226 value: v2045 stateAfter: - lastLocationAccess: - #next: i2164  <|@  <|@
f <@~|@floating>@ <|@
tid v2183 <|@
result [v14|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2164 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2164 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2183 
=== Succesors ===
next: v2004 
=== Usages ===
v2004 
=== Predecessor ===
v2000 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2183 #next: v2004  <|@  <|@
f <@~|@floating>@ <|@
tid v2227 <|@
result [v24|QWORD[*] + 40] <|@
d <@d|@=== Debug Properties ===
displacement: 40
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2004 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2004 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2227 
value: i2164 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2165 
=== Usages ===
=== Predecessor ===
i2164 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2227 value: i2164 stateAfter: - lastLocationAccess: - #next: i2165  <|@  <|@
f <@~|@floating>@ <|@
tid v2184 <|@
result [v14|QWORD[.] + 18] <|@
d <@d|@=== Debug Properties ===
displacement: 18
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2165 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2165 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2184 
=== Succesors ===
next: v2006 
=== Usages ===
v2006 
=== Predecessor ===
v2004 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2184 #next: v2006  <|@  <|@
f <@~|@floating>@ <|@
tid v2228 <|@
result [v24|QWORD[*] + 42] <|@
d <@d|@=== Debug Properties ===
displacement: 42
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2006 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2006 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2228 
value: i2165 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2166 
=== Usages ===
=== Predecessor ===
i2165 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2228 value: i2165 stateAfter: - lastLocationAccess: - #next: i2166  <|@  <|@
f <@~|@floating>@ <|@
tid v2185 <|@
result [v14|QWORD[.] + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2166 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2166 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2185 
=== Succesors ===
next: v2008 
=== Usages ===
v2008 
=== Predecessor ===
v2006 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2185 #next: v2008  <|@  <|@
f <@~|@floating>@ <|@
tid v2229 <|@
result [v24|QWORD[*] + 44] <|@
d <@d|@=== Debug Properties ===
displacement: 44
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2008 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2008 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2229 
value: i2166 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2167 
=== Usages ===
=== Predecessor ===
i2166 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2229 value: i2166 stateAfter: - lastLocationAccess: - #next: i2167  <|@  <|@
f <@~|@floating>@ <|@
tid v2186 <|@
result [v14|QWORD[.] + 22] <|@
d <@d|@=== Debug Properties ===
displacement: 22
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2167 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2167 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2186 
=== Succesors ===
next: v2010 
=== Usages ===
v2010 
=== Predecessor ===
v2008 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2186 #next: v2010  <|@  <|@
f <@~|@floating>@ <|@
tid v2230 <|@
result [v24|QWORD[*] + 46] <|@
d <@d|@=== Debug Properties ===
displacement: 46
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2010 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2010 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2230 
value: i2167 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2168 
=== Usages ===
=== Predecessor ===
i2167 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2230 value: i2167 stateAfter: - lastLocationAccess: - #next: i2168  <|@  <|@
f <@~|@floating>@ <|@
tid v2187 <|@
result [v14|QWORD[.] + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2168 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2168 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2187 
=== Succesors ===
next: v2012 
=== Usages ===
v2012 
=== Predecessor ===
v2010 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2187 #next: v2012  <|@  <|@
f <@~|@floating>@ <|@
tid v2231 <|@
result [v24|QWORD[*] + 48] <|@
d <@d|@=== Debug Properties ===
displacement: 48
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2012 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2012 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2231 
value: i2168 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2169 
=== Usages ===
=== Predecessor ===
i2168 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2231 value: i2168 stateAfter: - lastLocationAccess: - #next: i2169  <|@  <|@
f <@~|@floating>@ <|@
tid v2188 <|@
result [v14|QWORD[.] + 26] <|@
d <@d|@=== Debug Properties ===
displacement: 26
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2169 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2169 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2188 
=== Succesors ===
next: v2014 
=== Usages ===
v2014 
=== Predecessor ===
v2012 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2188 #next: v2014  <|@  <|@
f <@~|@floating>@ <|@
tid v2232 <|@
result [v24|QWORD[*] + 50] <|@
d <@d|@=== Debug Properties ===
displacement: 50
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2014 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2014 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2232 
value: i2169 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2170 
=== Usages ===
=== Predecessor ===
i2169 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2232 value: i2169 stateAfter: - lastLocationAccess: - #next: i2170  <|@  <|@
f <@~|@floating>@ <|@
tid v2189 <|@
result [v14|QWORD[.] + 28] <|@
d <@d|@=== Debug Properties ===
displacement: 28
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2170 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2170 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2189 
=== Succesors ===
next: v2016 
=== Usages ===
v2016 
=== Predecessor ===
v2014 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2189 #next: v2016  <|@  <|@
f <@~|@floating>@ <|@
tid v2233 <|@
result [v24|QWORD[*] + 52] <|@
d <@d|@=== Debug Properties ===
displacement: 52
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2016 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2016 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2233 
value: i2170 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2171 
=== Usages ===
=== Predecessor ===
i2170 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2233 value: i2170 stateAfter: - lastLocationAccess: - #next: i2171  <|@  <|@
f <@~|@floating>@ <|@
tid v2190 <|@
result [v14|QWORD[.] + 30] <|@
d <@d|@=== Debug Properties ===
displacement: 30
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2171 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2171 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2190 
=== Succesors ===
next: v2018 
=== Usages ===
v2018 
=== Predecessor ===
v2016 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2190 #next: v2018  <|@  <|@
f <@~|@floating>@ <|@
tid v2234 <|@
result [v24|QWORD[*] + 54] <|@
d <@d|@=== Debug Properties ===
displacement: 54
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2018 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2018 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2234 
value: i2171 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2172 
=== Usages ===
=== Predecessor ===
i2171 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2234 value: i2171 stateAfter: - lastLocationAccess: - #next: i2172  <|@  <|@
f <@~|@floating>@ <|@
tid v2191 <|@
result [v14|QWORD[.] + 32] <|@
d <@d|@=== Debug Properties ===
displacement: 32
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2172 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2172 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2191 
=== Succesors ===
next: v2020 
=== Usages ===
v2020 
=== Predecessor ===
v2018 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2191 #next: v2020  <|@  <|@
f <@~|@floating>@ <|@
tid v2235 <|@
result [v24|QWORD[*] + 56] <|@
d <@d|@=== Debug Properties ===
displacement: 56
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2020 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2020 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2235 
value: i2172 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2173 
=== Usages ===
=== Predecessor ===
i2172 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2235 value: i2172 stateAfter: - lastLocationAccess: - #next: i2173  <|@  <|@
f <@~|@floating>@ <|@
tid v2192 <|@
result [v14|QWORD[.] + 34] <|@
d <@d|@=== Debug Properties ===
displacement: 34
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2173 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2173 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2192 
=== Succesors ===
next: v2022 
=== Usages ===
v2022 
=== Predecessor ===
v2020 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2192 #next: v2022  <|@  <|@
f <@~|@floating>@ <|@
tid v2236 <|@
result [v24|QWORD[*] + 58] <|@
d <@d|@=== Debug Properties ===
displacement: 58
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2022 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2022 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2236 
value: i2173 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2174 
=== Usages ===
=== Predecessor ===
i2173 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2236 value: i2173 stateAfter: - lastLocationAccess: - #next: i2174  <|@  <|@
f <@~|@floating>@ <|@
tid v2193 <|@
result [v14|QWORD[.] + 36] <|@
d <@d|@=== Debug Properties ===
displacement: 36
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2174 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2174 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2193 
=== Succesors ===
next: v2024 
=== Usages ===
v2024 
=== Predecessor ===
v2022 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2193 #next: v2024  <|@  <|@
f <@~|@floating>@ <|@
tid v2237 <|@
result [v24|QWORD[*] + 60] <|@
d <@d|@=== Debug Properties ===
displacement: 60
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2024 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2024 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2237 
value: i2174 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2175 
=== Usages ===
=== Predecessor ===
i2174 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2237 value: i2174 stateAfter: - lastLocationAccess: - #next: i2175  <|@  <|@
f <@~|@floating>@ <|@
tid v2194 <|@
result [v14|QWORD[.] + 38] <|@
d <@d|@=== Debug Properties ===
displacement: 38
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2175 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2175 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2194 
=== Succesors ===
next: v2026 
=== Usages ===
v2026 
=== Predecessor ===
v2024 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2194 #next: v2026  <|@  <|@
f <@~|@floating>@ <|@
tid v2238 <|@
result [v24|QWORD[*] + 62] <|@
d <@d|@=== Debug Properties ===
displacement: 62
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2026 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2026 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2238 
value: i2175 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2176 
=== Usages ===
=== Predecessor ===
i2175 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2238 value: i2175 stateAfter: - lastLocationAccess: - #next: i2176  <|@  <|@
f <@~|@floating>@ <|@
tid v2195 <|@
result [v14|QWORD[.] + 40] <|@
d <@d|@=== Debug Properties ===
displacement: 40
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2176 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2176 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2195 
=== Succesors ===
next: v2028 
=== Usages ===
v2028 
=== Predecessor ===
v2026 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2195 #next: v2028  <|@  <|@
f <@~|@floating>@ <|@
tid v2239 <|@
result [v24|QWORD[*] + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2028 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2028 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2239 
value: i2176 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2177 
=== Usages ===
=== Predecessor ===
i2176 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2239 value: i2176 stateAfter: - lastLocationAccess: - #next: i2177  <|@  <|@
f <@~|@floating>@ <|@
tid v2196 <|@
result [v14|QWORD[.] + 42] <|@
d <@d|@=== Debug Properties ===
displacement: 42
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2177 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2177 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2196 
=== Succesors ===
next: v2030 
=== Usages ===
v2030 
=== Predecessor ===
v2028 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2196 #next: v2030  <|@  <|@
f <@~|@floating>@ <|@
tid v2240 <|@
result [v24|QWORD[*] + 66] <|@
d <@d|@=== Debug Properties ===
displacement: 66
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2030 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2030 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2240 
value: i2177 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2178 
=== Usages ===
=== Predecessor ===
i2177 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2240 value: i2177 stateAfter: - lastLocationAccess: - #next: i2178  <|@  <|@
f <@~|@floating>@ <|@
tid v2197 <|@
result [v14|QWORD[.] + 44] <|@
d <@d|@=== Debug Properties ===
displacement: 44
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2178 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2178 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2197 
=== Succesors ===
next: v2032 
=== Usages ===
v2032 
=== Predecessor ===
v2030 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2197 #next: v2032  <|@  <|@
f <@~|@floating>@ <|@
tid v2241 <|@
result [v24|QWORD[*] + 68] <|@
d <@d|@=== Debug Properties ===
displacement: 68
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2032 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2032 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2241 
value: i2178 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2179 
=== Usages ===
=== Predecessor ===
i2178 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2241 value: i2178 stateAfter: - lastLocationAccess: - #next: i2179  <|@  <|@
f <@~|@floating>@ <|@
tid v2198 <|@
result [v14|QWORD[.] + 46] <|@
d <@d|@=== Debug Properties ===
displacement: 46
scale: Times1
stamp: void*
=== Inputs ===
base: a1817 
index: - 
=== Succesors ===
=== Usages ===
i2179 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1817 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2179 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2198 
=== Succesors ===
next: v2034 
=== Usages ===
v2034 
=== Predecessor ===
v2032 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2198 #next: v2034  <|@  <|@
f <@~|@floating>@ <|@
tid v2242 <|@
result [v24|QWORD[*] + 70] <|@
d <@d|@=== Debug Properties ===
displacement: 70
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2034 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2034 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2242 
value: i2179 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: i2180 
=== Usages ===
=== Predecessor ===
i2179 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2242 value: i2179 stateAfter: - lastLocationAccess: - #next: i2180  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i2180 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: Array: char
nullCheck: false
stamp: i16
=== Inputs ===
stateBefore: - 
guard: - 
address: v2181 
=== Succesors ===
next: v2036 
=== Usages ===
v2036 
=== Predecessor ===
v2034 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v2181 #next: v2036  <|@  <|@
f <@~|@floating>@ <|@
tid v2243 <|@
result [v24|QWORD[*] + 72] <|@
d <@d|@=== Debug Properties ===
displacement: 72
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2036 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2036 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2243 
value: i2180 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: v2039 
=== Usages ===
=== Predecessor ===
i2180 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2243 value: i2180 stateAfter: - lastLocationAccess: - #next: v2039  <|@  <|@
f <@~|@floating>@ <|@
tid v2244 <|@
result [v24|QWORD[*] + 74] <|@
d <@d|@=== Debug Properties ===
displacement: 74
scale: Times1
stamp: void*
=== Inputs ===
base: j1970 
index: - 
=== Succesors ===
=== Usages ===
v2039 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: j1970 index: -  <|@  <|@
f <@~|@floating>@ <|@
tid i2037 <|@
result short[108|0x6c] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 108
stableDimension: 0
stamp: i16
stampKind: i16
value: short[108|0x6c]
=== Inputs ===
=== Succesors ===
=== Usages ===
v2039 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v2039 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: INIT_LOCATION
nullCheck: false
stamp: void
=== Inputs ===
stateBefore: - 
guard: - 
address: v2244 
value: i2037 
stateAfter: - 
lastLocationAccess: - 
=== Succesors ===
next: a1754 
=== Usages ===
=== Predecessor ===
v2036 >@ <|@
instruction <@Write|@org.graalvm.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v2244 value: i2037 stateAfter: - lastLocationAccess: - #next: a1754  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1754 <|@
result v25|QWORD[.] <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a -
=== Inputs ===
object: a1724 
=== Succesors ===
next: a1755 
=== Usages ===
v12 
=== Predecessor ===
v2039 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1724 #next: a1755  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1755 <|@
result v27|QWORD[.] <|@
d <@d|@=== Debug Properties ===
predefinedStamp: [null]
stamp: a -
=== Inputs ===
object: a1727 
=== Succesors ===
next: v1756 
=== Usages ===
=== Predecessor ===
a1754 >@ <|@
instruction <@FixedValueAnchor|@org.graalvm.compiler.nodes.extended.FixedValueAnchorNode>@ object: a1727 #next: v1756  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1756 <|@
d <@d|@=== Debug Properties ===
barriers: 10
location: INIT_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: v12 
=== Usages ===
=== Predecessor ===
a1755 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: v12  <|@  <|@
f <@*|@fixed>@ <|@
tid v12 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
result: a1754 
memoryMap: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v1756 >@ <|@
instruction <@Return|@org.graalvm.compiler.nodes.ReturnNode>@ result: a1754 memoryMap: -  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr   -1  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr   -1  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr   -1  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr   -1  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   -1  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   -1  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr   -1  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr   -1  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   24  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   68  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr  114  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  230  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  238  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  246  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  254  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  262  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   24  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   68  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr  114  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  230  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  238  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  246  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  254  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  262  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|q fixed "[rax|q]" rax|q v25|q [0, 1[[214, 216[[228, 230[[244, 246[[260, 262[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[226, 229[[242, 245[[258, 261[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[224, 229[[240, 245[[256, 261[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[228, 229[[244, 245[[260, 261[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v49|q [0, 6[[222, 229[[238, 245[[254, 261[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  v0|q QWORD "[v0|q]" v0|q rsi|- [6, 48[[218, 245[6 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q v6|q [8, 25[8 MustHaveRegister 12 MustHaveRegister 22 MustHaveRegister 24 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[v2|q]" v2|q -1 [10, 14[10 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[v3|q]" v3|q -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[v5|q]" v5|q rax|q [230, 233[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v6|q QWORD "[v6|q]" v6|q v5|q [26, 38[28 ShouldHaveRegister 30 MustHaveRegister 32 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|q QWORD "[v7|q]" v7|q v6|q [28, 72[[234, 250[28 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v8|y V256_QWORD "[v8|y]" v8|y -1 [36, 38[36 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q -1 [40, 66[40 MustHaveRegister 42 MustHaveRegister 52 MustHaveRegister 54 MustHaveRegister 56 MustHaveRegister 58 MustHaveRegister 60 MustHaveRegister 62 MustHaveRegister 64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q -1 [42, 50[42 MustHaveRegister 44 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q -1 [236, 238[236 MustHaveRegister 238 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[v12|q]" v12|q rax|q [246, 249[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q v9|q [66, 69[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[v14|q]" v14|q v12|q [70, 208[[250, 266[76 MustHaveRegister 80 MustHaveRegister 90 MustHaveRegister 92 MustHaveRegister 144 MustHaveRegister 148 MustHaveRegister 152 MustHaveRegister 156 MustHaveRegister 160 MustHaveRegister 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 192 MustHaveRegister 196 MustHaveRegister 200 MustHaveRegister 204 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[v15|q]" v15|q -1 [72, 74[72 MustHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v16|y V256_WORD "[v16|y]" v16|y -1 [74, 78[74 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[v17|q]" v17|q -1 [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[v18|q]" v18|q -1 [80, 88[80 MustHaveRegister 84 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v19|y V256_WORD "[v19|y]" v19|y -1 [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v20|v V32_WORD "[v20|v]" v20|v -1 [86, 88[86 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[v21|q]" v21|q v24|q [94, 115[94 MustHaveRegister 96 MustHaveRegister 106 MustHaveRegister 108 MustHaveRegister 110 MustHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[v22|q]" v22|q -1 [96, 104[96 MustHaveRegister 98 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[v23|q]" v23|q rax|q [262, 265[262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v24|q QWORD "[v24|q]" v24|q v23|q [116, 212[118 ShouldHaveRegister 120 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 146 MustHaveRegister 150 MustHaveRegister 154 MustHaveRegister 158 MustHaveRegister 162 MustHaveRegister 166 MustHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 194 MustHaveRegister 198 MustHaveRegister 202 MustHaveRegister 206 MustHaveRegister 210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[v25|q]" v25|q v24|q [118, 214[118 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[v26|q]" v26|q -1 [120, 122[120 MustHaveRegister 122 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[v27|q]" v27|q v26|q [122, 132[122 MustHaveRegister 132 MustHaveRegister  "NoSpillStore"
  v28|q QWORD "[v28|q]" v28|q -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v29|q QWORD "[v29|q]" v29|q -1 [126, 128[126 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v27|q [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d -1 [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d -1 [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d -1 [152, 154[152 MustHaveRegister 154 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d -1 [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d -1 [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d -1 [164, 166[164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d -1 [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [176, 178[176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d -1 [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [188, 190[188 MustHaveRegister 190 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d -1 [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d -1 [200, 202[200 MustHaveRegister 202 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d -1 [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[v48|q]" v48|q -1 [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v49|q QWORD "[v49|q]" v49|q -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|q fixed "[rax|q]" rax|q v25|q [0, 1[[214, 216[[228, 230[[244, 246[[260, 262[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[226, 229[[242, 245[[258, 261[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[224, 229[[240, 245[[256, 261[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[228, 229[[244, 245[[260, 261[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v49|q [0, 6[[222, 229[[238, 245[[254, 261[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  v0|q QWORD "[r13|q]" v0|q rsi|- [6, 48[[218, 245[6 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[rax|q]" v1|q v6|q [8, 25[8 MustHaveRegister 12 MustHaveRegister 22 MustHaveRegister 24 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[rsi|q]" v2|q -1 [10, 14[10 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[rdx|q]" v3|q -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[rax|q]" v5|q rax|q [230, 233[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v6|q QWORD "[rax|q]" v6|q v5|q [26, 38[28 ShouldHaveRegister 30 MustHaveRegister 32 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|q QWORD "[r14|q]" v7|q v6|q [28, 72[[234, 250[28 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v8|y V256_QWORD "[xmm0|y]" v8|y -1 [36, 38[36 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rax|q]" v9|q -1 [40, 66[40 MustHaveRegister 42 MustHaveRegister 52 MustHaveRegister 54 MustHaveRegister 56 MustHaveRegister 58 MustHaveRegister 60 MustHaveRegister 62 MustHaveRegister 64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[rsi|q]" v10|q -1 [42, 50[42 MustHaveRegister 44 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rsi|q]" v11|q -1 [236, 238[236 MustHaveRegister 238 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rax|q]" v12|q rax|q [246, 249[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[rax|q]" v13|q v9|q [66, 69[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[r13|q]" v14|q v12|q [70, 208[[250, 266[76 MustHaveRegister 80 MustHaveRegister 90 MustHaveRegister 92 MustHaveRegister 144 MustHaveRegister 148 MustHaveRegister 152 MustHaveRegister 156 MustHaveRegister 160 MustHaveRegister 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 192 MustHaveRegister 196 MustHaveRegister 200 MustHaveRegister 204 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q -1 [72, 74[72 MustHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v16|y V256_WORD "[xmm0|y]" v16|y -1 [74, 78[74 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[rax|q]" v17|q -1 [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[rax|q]" v18|q -1 [80, 88[80 MustHaveRegister 84 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v19|y V256_WORD "[xmm0|y]" v19|y -1 [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v20|v V32_WORD "[xmm0|v]" v20|v -1 [86, 88[86 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[rax|q]" v21|q v24|q [94, 115[94 MustHaveRegister 96 MustHaveRegister 106 MustHaveRegister 108 MustHaveRegister 110 MustHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[rsi|q]" v22|q -1 [96, 104[96 MustHaveRegister 98 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rax|q]" v23|q rax|q [262, 265[262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v24|q QWORD "[rax|q]" v24|q v23|q [116, 212[118 ShouldHaveRegister 120 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 146 MustHaveRegister 150 MustHaveRegister 154 MustHaveRegister 158 MustHaveRegister 162 MustHaveRegister 166 MustHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 194 MustHaveRegister 198 MustHaveRegister 202 MustHaveRegister 206 MustHaveRegister 210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rsi|q]" v25|q v24|q [118, 214[118 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rdx|q]" v26|q -1 [120, 122[120 MustHaveRegister 122 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[rdx|q]" v27|q v26|q [122, 132[122 MustHaveRegister 132 MustHaveRegister  "NoSpillStore"
  v28|q QWORD "[rcx|q]" v28|q -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v29|q QWORD "[rcx|q]" v29|q -1 [126, 128[126 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdx|d]" v30|d v27|q [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rdx|d]" v31|d -1 [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[rdx|d]" v32|d -1 [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[rdx|d]" v33|d -1 [152, 154[152 MustHaveRegister 154 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rdx|d]" v34|d -1 [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rdx|d]" v35|d -1 [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rdx|d]" v36|d -1 [164, 166[164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdx|d]" v37|d -1 [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdx|d]" v38|d -1 [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rdx|d]" v39|d -1 [176, 178[176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rdx|d]" v40|d -1 [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rdx|d]" v41|d -1 [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rdx|d]" v42|d -1 [188, 190[188 MustHaveRegister 190 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[rdx|d]" v43|d -1 [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[rdx|d]" v44|d -1 [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[rdx|d]" v45|d -1 [200, 202[200 MustHaveRegister 202 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[rdx|d]" v46|d -1 [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rdx|d]" v47|d -1 [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[rsi|q]" v48|q -1 [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v49|q QWORD "[rsi|q]" v49|q -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   24  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   68  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr  114  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  230  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  238  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  246  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  254  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  262  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|q fixed "[rax|q]" rax|q v25|q [0, 1[[214, 216[[228, 230[[244, 246[[260, 262[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[226, 229[[242, 245[[258, 261[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[224, 229[[240, 245[[256, 261[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[228, 229[[244, 245[[260, 261[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v49|q [0, 6[[222, 229[[238, 245[[254, 261[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  v0|q QWORD "[r13|q]" v0|q rsi|- [6, 48[[218, 245[6 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[rax|q]" v1|q v6|q [8, 25[8 MustHaveRegister 12 MustHaveRegister 22 MustHaveRegister 24 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[rsi|q]" v2|q -1 [10, 14[10 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[rdx|q]" v3|q -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[rax|q]" v5|q rax|q [230, 233[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v6|q QWORD "[rax|q]" v6|q v5|q [26, 38[28 ShouldHaveRegister 30 MustHaveRegister 32 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|q QWORD "[r14|q]" v7|q v6|q [28, 72[[234, 250[28 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v8|y V256_QWORD "[xmm0|y]" v8|y -1 [36, 38[36 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rax|q]" v9|q -1 [40, 66[40 MustHaveRegister 42 MustHaveRegister 52 MustHaveRegister 54 MustHaveRegister 56 MustHaveRegister 58 MustHaveRegister 60 MustHaveRegister 62 MustHaveRegister 64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[rsi|q]" v10|q -1 [42, 50[42 MustHaveRegister 44 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rsi|q]" v11|q -1 [236, 238[236 MustHaveRegister 238 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rax|q]" v12|q rax|q [246, 249[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[rax|q]" v13|q v9|q [66, 69[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[r13|q]" v14|q v12|q [70, 208[[250, 266[76 MustHaveRegister 80 MustHaveRegister 90 MustHaveRegister 92 MustHaveRegister 144 MustHaveRegister 148 MustHaveRegister 152 MustHaveRegister 156 MustHaveRegister 160 MustHaveRegister 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 192 MustHaveRegister 196 MustHaveRegister 200 MustHaveRegister 204 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q -1 [72, 74[72 MustHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v16|y V256_WORD "[xmm0|y]" v16|y -1 [74, 78[74 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[rax|q]" v17|q -1 [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[rax|q]" v18|q -1 [80, 88[80 MustHaveRegister 84 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v19|y V256_WORD "[xmm0|y]" v19|y -1 [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v20|v V32_WORD "[xmm0|v]" v20|v -1 [86, 88[86 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[rax|q]" v21|q v24|q [94, 115[94 MustHaveRegister 96 MustHaveRegister 106 MustHaveRegister 108 MustHaveRegister 110 MustHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[rsi|q]" v22|q -1 [96, 104[96 MustHaveRegister 98 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rax|q]" v23|q rax|q [262, 265[262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v24|q QWORD "[rax|q]" v24|q v23|q [116, 212[118 ShouldHaveRegister 120 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 146 MustHaveRegister 150 MustHaveRegister 154 MustHaveRegister 158 MustHaveRegister 162 MustHaveRegister 166 MustHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 194 MustHaveRegister 198 MustHaveRegister 202 MustHaveRegister 206 MustHaveRegister 210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rsi|q]" v25|q v24|q [118, 214[118 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rdx|q]" v26|q -1 [120, 122[120 MustHaveRegister 122 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[rdx|q]" v27|q v26|q [122, 132[122 MustHaveRegister 132 MustHaveRegister  "NoSpillStore"
  v28|q QWORD "[rcx|q]" v28|q -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v29|q QWORD "[rcx|q]" v29|q -1 [126, 128[126 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdx|d]" v30|d v27|q [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rdx|d]" v31|d -1 [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[rdx|d]" v32|d -1 [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[rdx|d]" v33|d -1 [152, 154[152 MustHaveRegister 154 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rdx|d]" v34|d -1 [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rdx|d]" v35|d -1 [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rdx|d]" v36|d -1 [164, 166[164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdx|d]" v37|d -1 [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdx|d]" v38|d -1 [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rdx|d]" v39|d -1 [176, 178[176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rdx|d]" v40|d -1 [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rdx|d]" v41|d -1 [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rdx|d]" v42|d -1 [188, 190[188 MustHaveRegister 190 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[rdx|d]" v43|d -1 [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[rdx|d]" v44|d -1 [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[rdx|d]" v45|d -1 [200, 202[200 MustHaveRegister 202 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[rdx|d]" v46|d -1 [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rdx|d]" v47|d -1 [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[rsi|q]" v48|q -1 [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v49|q QWORD "[rsi|q]" v49|q -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   24  <|@ instruction JUMP ~[v1|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   68  <|@ instruction JUMP ~[v13|QWORD[.]] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr  114  <|@ instruction JUMP ~[v21|QWORD] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  230  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction JUMP ~[v5|QWORD[.]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  238  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  246  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction JUMP ~[v12|QWORD[.]] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  254  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  262  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~[v23|QWORD[.]] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|q fixed "[rax|q]" rax|q v25|q [0, 1[[214, 216[[228, 230[[244, 246[[260, 262[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[226, 229[[242, 245[[258, 261[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[224, 229[[240, 245[[256, 261[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[228, 229[[244, 245[[260, 261[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v49|q [0, 6[[222, 229[[238, 245[[254, 261[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[228, 229[[244, 245[[260, 261[ "NoDefinitionFound"
  v0|q QWORD "[r13|q]" v0|q rsi|- [6, 48[[218, 245[6 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[rax|q]" v1|q v6|q [8, 25[8 MustHaveRegister 12 MustHaveRegister 22 MustHaveRegister 24 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[rsi|q]" v2|q -1 [10, 14[10 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[rdx|q]" v3|q -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[rax|q]" v5|q rax|q [230, 233[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v6|q QWORD "[rax|q]" v6|q v5|q [26, 38[28 ShouldHaveRegister 30 MustHaveRegister 32 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|q QWORD "[r14|q]" v7|q v6|q [28, 72[[234, 250[28 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v8|y V256_QWORD "[xmm0|y]" v8|y -1 [36, 38[36 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rax|q]" v9|q -1 [40, 66[40 MustHaveRegister 42 MustHaveRegister 52 MustHaveRegister 54 MustHaveRegister 56 MustHaveRegister 58 MustHaveRegister 60 MustHaveRegister 62 MustHaveRegister 64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[rsi|q]" v10|q -1 [42, 50[42 MustHaveRegister 44 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rsi|q]" v11|q -1 [236, 238[236 MustHaveRegister 238 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rax|q]" v12|q rax|q [246, 249[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[rax|q]" v13|q v9|q [66, 69[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[r13|q]" v14|q v12|q [70, 208[[250, 266[76 MustHaveRegister 80 MustHaveRegister 90 MustHaveRegister 92 MustHaveRegister 144 MustHaveRegister 148 MustHaveRegister 152 MustHaveRegister 156 MustHaveRegister 160 MustHaveRegister 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 192 MustHaveRegister 196 MustHaveRegister 200 MustHaveRegister 204 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q -1 [72, 74[72 MustHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v16|y V256_WORD "[xmm0|y]" v16|y -1 [74, 78[74 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[rax|q]" v17|q -1 [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[rax|q]" v18|q -1 [80, 88[80 MustHaveRegister 84 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v19|y V256_WORD "[xmm0|y]" v19|y -1 [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v20|v V32_WORD "[xmm0|v]" v20|v -1 [86, 88[86 MustHaveRegister 88 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[rax|q]" v21|q v24|q [94, 115[94 MustHaveRegister 96 MustHaveRegister 106 MustHaveRegister 108 MustHaveRegister 110 MustHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[rsi|q]" v22|q -1 [96, 104[96 MustHaveRegister 98 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rax|q]" v23|q rax|q [262, 265[262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v24|q QWORD "[rax|q]" v24|q v23|q [116, 212[118 ShouldHaveRegister 120 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 146 MustHaveRegister 150 MustHaveRegister 154 MustHaveRegister 158 MustHaveRegister 162 MustHaveRegister 166 MustHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 194 MustHaveRegister 198 MustHaveRegister 202 MustHaveRegister 206 MustHaveRegister 210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rsi|q]" v25|q v24|q [118, 214[118 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rdx|q]" v26|q -1 [120, 122[120 MustHaveRegister 122 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[rdx|q]" v27|q v26|q [122, 132[122 MustHaveRegister 132 MustHaveRegister  "NoSpillStore"
  v28|q QWORD "[rcx|q]" v28|q -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v29|q QWORD "[rcx|q]" v29|q -1 [126, 128[126 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdx|d]" v30|d v27|q [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rdx|d]" v31|d -1 [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[rdx|d]" v32|d -1 [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[rdx|d]" v33|d -1 [152, 154[152 MustHaveRegister 154 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rdx|d]" v34|d -1 [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rdx|d]" v35|d -1 [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rdx|d]" v36|d -1 [164, 166[164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdx|d]" v37|d -1 [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdx|d]" v38|d -1 [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rdx|d]" v39|d -1 [176, 178[176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rdx|d]" v40|d -1 [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rdx|d]" v41|d -1 [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rdx|d]" v42|d -1 [188, 190[188 MustHaveRegister 190 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[rdx|d]" v43|d -1 [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[rdx|d]" v44|d -1 [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[rdx|d]" v45|d -1 [200, 202[200 MustHaveRegister 202 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[rdx|d]" v46|d -1 [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rdx|d]" v47|d -1 [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[rsi|q]" v48|q -1 [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v49|q QWORD "[rsi|q]" v49|q -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction v6|QWORD[*] = MOVE v1|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [v6|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD[.] = MOVE v13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [v14|QWORD[.]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[*] = MOVE v21|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  114  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [v24|QWORD[*]] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  230  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v6|QWORD[*] = MOVE v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  232  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  238  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  246  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD[.] = MOVE v12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  254  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  262  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[*] = MOVE v23|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  264  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|QWORD = LEA [v1|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: v3|QWORD, y: v2|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: v3|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[v1|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction v6|QWORD[*] = MOVE v1|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction v7|QWORD[.] = MOVE v6|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [v6|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [v6|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [v6|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction v8|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [v6|QWORD[*] + 16], input: v8|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction v9|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction v10|QWORD = LEA [v9|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: v10|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: v10|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[v9|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [v9|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [v9|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [v9|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction v13|QWORD[.] = MOVE v9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD[.] = MOVE v13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction v15|QWORD[.] = LEA [v7|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction v16|V256_WORD = H [v15|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction v17|QWORD[.] = LEA [v14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [v17|QWORD[.]], input: v16|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction v18|QWORD[.] = LEA [v14|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction v19|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [v18|QWORD[.]], input: v19|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction v20|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [v18|QWORD[.] + 32], input: v20|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [v14|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [v14|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction v21|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction v22|QWORD = LEA [v21|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v22|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: v22|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[v21|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[*] = MOVE v21|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  114  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction v25|QWORD[.] = MOVE v24|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction v26|QWORD[*] = LEA [v24|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction v27|QWORD[.] = MOVE v26|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction v28|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction v29|QWORD = MOV [v28|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [v24|QWORD[*]], y: v29|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [v24|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction v30|DWORD[.] = COMPRESSPOINTER (input: v27|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [v24|QWORD[*] + 12], y: v30|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [v24|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [v24|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [v24|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [v24|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction v31|DWORD = MOVSX [v14|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [v24|QWORD[*] + 40], y: v31|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction v32|DWORD = MOVSX [v14|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [v24|QWORD[*] + 42], y: v32|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction v33|DWORD = MOVSX [v14|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [v24|QWORD[*] + 44], y: v33|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction v34|DWORD = MOVSX [v14|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [v24|QWORD[*] + 46], y: v34|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction v35|DWORD = MOVSX [v14|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [v24|QWORD[*] + 48], y: v35|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction v36|DWORD = MOVSX [v14|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v24|QWORD[*] + 50], y: v36|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction v37|DWORD = MOVSX [v14|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [v24|QWORD[*] + 52], y: v37|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction v38|DWORD = MOVSX [v14|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [v24|QWORD[*] + 54], y: v38|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction v39|DWORD = MOVSX [v14|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v24|QWORD[*] + 56], y: v39|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction v40|DWORD = MOVSX [v14|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [v24|QWORD[*] + 58], y: v40|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction v41|DWORD = MOVSX [v14|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [v24|QWORD[*] + 60], y: v41|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction v42|DWORD = MOVSX [v14|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [v24|QWORD[*] + 62], y: v42|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction v43|DWORD = MOVSX [v14|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [v24|QWORD[*] + 64], y: v43|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction v44|DWORD = MOVSX [v14|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [v24|QWORD[*] + 66], y: v44|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction v45|DWORD = MOVSX [v14|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [v24|QWORD[*] + 68], y: v45|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction v46|DWORD = MOVSX [v14|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [v24|QWORD[*] + 70], y: v46|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction v47|DWORD = MOVSX [v14|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [v24|QWORD[*] + 72], y: v47|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [v24|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE v25|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction v49|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE v49|QWORD moveKind: QWORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  230  <|@ instruction v5|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v6|QWORD[*] = MOVE v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  232  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction v11|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  238  <|@ instruction rsi|QWORD = MOVE v11|QWORD moveKind: QWORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: v0|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr  246  <|@ instruction v12|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD[.] = MOVE v12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction v48|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  254  <|@ instruction rsi|QWORD = MOVE v48|QWORD moveKind: QWORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=v14|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] v14|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  262  <|@ instruction v23|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[*] = MOVE v23|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  264  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  114  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  232  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  264  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   28  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   32  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   34  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   36  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   38  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   40  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   42  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   44  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   46  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   50  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   52  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   54  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   56  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   58  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   60  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   62  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   64  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   66  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   72  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   74  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr   76  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr   78  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   80  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr   82  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr   84  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   86  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr   88  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr   90  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr   92  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr   94  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   96  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  100  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  104  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  106  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  108  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  110  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  112  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  114  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  118  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  120  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  122  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  126  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  128  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  130  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  132  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  134  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  136  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  138  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  140  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  142  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  144  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  148  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  150  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  152  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  154  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  156  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  158  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  160  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  162  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  164  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  168  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  170  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  172  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  174  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  176  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  180  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  184  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  188  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  190  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  214  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  216  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  220  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr  226  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  232  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  236  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr  242  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  244  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  252  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  258  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  260  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  264  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [vstack:0|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   74  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, vstack:0|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|q QWORD "[vstack:0|q]" vstack:0|q -1 [4, 142[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|q QWORD "[stack:32|q]" vstack:0|q -1 [4, 142[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   74  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   74  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   74  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   10  <|@ instruction rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD <|@ <|@
      nr   12  <|@ instruction rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD <|@ <|@
      nr   14  <|@ instruction CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   16  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   34  <|@ instruction MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD <|@ <|@
      nr   36  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 240] instr: 0 <|@ <|@
      nr   38  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" "B1" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   44  <|@ instruction r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr   46  <|@ instruction MOV [rax|QWORD[*] + 12] y: 16 size: DWORD <|@ <|@
      nr   48  <|@ instruction MOV [rax|QWORD[*]] y: 1 size: QWORD <|@ <|@
      nr   50  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   52  <|@ instruction xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD <|@ <|@
      nr   54  <|@ instruction J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr   56  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD <|@ <|@
      nr   60  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr   62  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   80  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 280] instr: 0 <|@ <|@
      nr   84  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 344] instr: 0 <|@ <|@
      nr   86  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 408] instr: 0 <|@ <|@
      nr   88  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 472] instr: 0 <|@ <|@
      nr   90  <|@ instruction MOV [rax|QWORD + 12] y: 34 size: DWORD <|@ <|@
      nr   92  <|@ instruction MOV [rax|QWORD] y: 1 size: QWORD <|@ <|@
      nr   94  <|@ instruction MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr   96  <|@ instruction rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD <|@ <|@
      nr  100  <|@ instruction JUMP ~[] destination: B5 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" "B4" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr   98  <|@ instruction r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  106  <|@ instruction xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU <|@ <|@
      nr  108  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD <|@ <|@
      nr  110  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  112  <|@ instruction rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD <|@ <|@
      nr  114  <|@ instruction xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> <|@ <|@
      nr  116  <|@ instruction J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU <|@ <|@
      nr  118  <|@ instruction xmm0|V32_WORD = L oc: SIMD<0,0> <|@ <|@
      nr  120  <|@ instruction J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD <|@ <|@
      nr  122  <|@ instruction MOV [r13|QWORD[.] + 48] y: 107 size: WORD <|@ <|@
      nr  124  <|@ instruction MOV [r13|QWORD[.] + 50] y: 108 size: WORD <|@ <|@
      nr  126  <|@ instruction rax|QWORD = MOV [r15|QWORD + 96] size: QWORD <|@ <|@
      nr  128  <|@ instruction rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD <|@ <|@
      nr  130  <|@ instruction CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD <|@ <|@
      nr  132  <|@ instruction BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607092346807469998
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  150  <|@ instruction MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD <|@ <|@
      nr  152  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 272] instr: 0 <|@ <|@
      nr  154  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 336] instr: 0 <|@ <|@
      nr  156  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 400] instr: 0 <|@ <|@
      nr  158  <|@ instruction AMD64PREFETCH ~[rax|QWORD + 464] instr: 0 <|@ <|@
      nr  160  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction JUMP ~[] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL numbPhis: 1 align: false label: ? <|@ <|@
      nr  166  <|@ instruction rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD <|@ <|@
      nr  168  <|@ instruction rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD <|@ <|@
      nr  170  <|@ instruction rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>} <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD <|@ <|@
      nr  176  <|@ instruction MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD <|@ <|@
      nr  178  <|@ instruction MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed} <|@ <|@
      nr  180  <|@ instruction rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3 <|@ <|@
      nr  182  <|@ instruction MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD <|@ <|@
      nr  184  <|@ instruction MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD <|@ <|@
      nr  186  <|@ instruction MOV [rax|QWORD[*] + 36] y: 18 size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV [rax|QWORD[*] + 24] y: 1 size: QWORD <|@ <|@
      nr  190  <|@ instruction MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed} <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  194  <|@ instruction MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD <|@ <|@
      nr  196  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD <|@ <|@
      nr  198  <|@ instruction MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD <|@ <|@
      nr  200  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD <|@ <|@
      nr  204  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD <|@ <|@
      nr  206  <|@ instruction MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD <|@ <|@
      nr  208  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD <|@ <|@
      nr  212  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD <|@ <|@
      nr  214  <|@ instruction MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD <|@ <|@
      nr  216  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  218  <|@ instruction MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD <|@ <|@
      nr  220  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD <|@ <|@
      nr  222  <|@ instruction MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD <|@ <|@
      nr  224  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD <|@ <|@
      nr  228  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD <|@ <|@
      nr  230  <|@ instruction MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD <|@ <|@
      nr  232  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD <|@ <|@
      nr  234  <|@ instruction MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD <|@ <|@
      nr  236  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD <|@ <|@
      nr  238  <|@ instruction MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD <|@ <|@
      nr  240  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD <|@ <|@
      nr  242  <|@ instruction MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD <|@ <|@
      nr  244  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD <|@ <|@
      nr  246  <|@ instruction MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD <|@ <|@
      nr  248  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD <|@ <|@
      nr  250  <|@ instruction MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD <|@ <|@
      nr  252  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD <|@ <|@
      nr  254  <|@ instruction MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD <|@ <|@
      nr  256  <|@ instruction rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD <|@ <|@
      nr  258  <|@ instruction MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD <|@ <|@
      nr  260  <|@ instruction MOV [rax|QWORD[*] + 74] y: 108 size: WORD <|@ <|@
      nr  262  <|@ instruction rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  264  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   20  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr   22  <|@ instruction rdx|DWORD = MOVE input: int[8|0x8] <|@ <|@
      nr   24  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   26  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   28  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   30  <|@ instruction JUMP ~[] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   66  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>} <|@ <|@
      nr   68  <|@ instruction rdx|DWORD = MOVE input: int[34|0x22] <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   72  <|@ st <@st|@reference-map: [r13:0, r14:0]
live-base-pointers: []
bench.StringOp.appendCont(Bench.scala:147) [bci: 0]
locals: r13|QWORD[.] - 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B4 -> B6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" 
    xhandlers
    flags 
    probability 4576918229304087680
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr  136  <|@ instruction rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>} <|@ <|@
      nr  138  <|@ instruction rdx|DWORD = MOVE input: int[16|0x10] <|@ <|@
      nr  140  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [r13:0]
live-base-pointers: []
java.lang.String.getChars(String.java:827) [bci: 61]
locals: - - - - - 
java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - int[1|0x1] 
java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7]
locals: vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} - 
locks: monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated] 
bench.StringOp.cont(Bench.scala:169) [bci: 115]
locals: - vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
bench.StringOp.appendCont(Bench.scala:149) [bci: 17]
locals: - - 
vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} Ljava/lang/StringBuffer; int[17|0x11] r13|QWORD[.] Object[null] 
>@ <|@ instruction rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17] <|@ <|@
      nr  144  <|@ instruction rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: new           #13         // java.lang.StringBuffer
     3: dup           
     4: invokespecial #0          // java.lang.StringBuffer.<init>:()void
     7: astore_1      
     8: aload_1       
     9: ldc           #19         // "a"
    11: invokevirtual #1          // java.lang.StringBuffer.append:(java.lang.String)java.lang.StringBuffer
    14: pop           
    15: aload_0       
    16: aload_1       
    17: invokevirtual #3          // cont:(java.lang.StringBuffer)java.lang.String
    20: areturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849c1e203493bc20f85efffffff900f1f80000000000f1f800000000089842400c0feff4883ec1848896c24104c8bee498b4760498b7770488d5030483bd60f87d8010000498957600f1880f00000004c8bf0c7400c1000000048c70001000000c74008addeaddec4c17d6f0500000000c5fe7f4010498b4760488d7058493b77700f87b4010000498977600f1880180100000f1880580100000f1880980100000f1880d8010000c7400c2200000048c70001000000c74008addeadde4c8be8498d4610c5fe6f00498d4510c5fe7f00498d4530c5f9efc0c5fe7f00c5f9efc0c5f97e40206641c745306b006641c745326c00498b4760488d7050493b77700f8756010000498977600f1880100100000f1880500100000f1880900100000f1880d0010000488bf0488d501848b9addeaddeaddeadde488b89a8000000488908c74008addeadde48c1ea0389500c44896010c740241200000048c7401801000000c74020addeadde410fbf551066895028410fbf55126689502a410fbf55146689502c410fbf55166689502e410fbf551866895030410fbf551a66895032410fbf551c66895034410fbf551e66895036410fbf552066895038410fbf55226689503a410fbf55246689503c410fbf55266689503e410fbf552866895040410fbf552a66895042410fbf552c66895044410fbf552e66895046410fbf55306689504866c7404a6c00488bc6488b6c24104883c418850500000000c5f877c348beaddeaddeaddeaddeba08000000b901000000e80000000090e914feffff48beaddeaddeaddeaddeba22000000b900000000e80000000090e962feffff48beaddeaddeaddeaddeba10000000b901000000e80000000090e9abfeffffe80000000090e80000000090  <||@
  Comment 0 2  <||@
  Comment 11 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x1068a1f78, value=0x113f15e60]:0x113f15e60}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 3  <||@
  Comment 32 1  <||@
  Comment 43 block B0 null  <||@
  Comment 43 0 [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 43 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 48 4 [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD  <||@
  Comment 48 6 r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 51 8 rax|QWORD = MOV [r15|QWORD + 96] size: QWORD  <||@
  Comment 55 10 rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD  <||@
  Comment 59 12 rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD  <||@
  Comment 63 14 CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD  <||@
  Comment 66 16 BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2  <||@
  Comment 72 block B2 null  <||@
  Comment 72 32 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 72 34 MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD  <||@
  Comment 76 36 AMD64PREFETCH ~[rax|QWORD + 240] instr: 0  <||@
  Comment 83 38 rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD  <||@
  Comment 83 40 JUMP ~[] destination: B2 -> B3  <||@
  Comment 83 block B3 null  <||@
  Comment 83 42 [] = LABEL numbPhis: 1 align: false label: ?  <||@
  Comment 83 44 r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD  <||@
  Comment 86 46 MOV [rax|QWORD[*] + 12] y: 16 size: DWORD  <||@
  Comment 93 48 MOV [rax|QWORD[*]] y: 1 size: QWORD  <||@
  Comment 100 50 MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed}  <||@
  Comment 100 {meta{HotSpotType<[C, resolved>;compressed}}  <||@
  Comment 107 52 xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD  <||@
  Comment 107 {DataSection[0x0]}  <||@
  Comment 116 54 J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU  <||@
  Comment 121 56 rax|QWORD = MOV [r15|QWORD + 96] size: QWORD  <||@
  Comment 125 58 rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD  <||@
  Comment 129 60 CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD  <||@
  Comment 133 62 BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5  <||@
  Comment 139 block B5 null  <||@
  Comment 139 78 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 139 80 MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD  <||@
  Comment 143 82 AMD64PREFETCH ~[rax|QWORD + 280] instr: 0  <||@
  Comment 150 84 AMD64PREFETCH ~[rax|QWORD + 344] instr: 0  <||@
  Comment 157 86 AMD64PREFETCH ~[rax|QWORD + 408] instr: 0  <||@
  Comment 164 88 AMD64PREFETCH ~[rax|QWORD + 472] instr: 0  <||@
  Comment 171 90 MOV [rax|QWORD + 12] y: 34 size: DWORD  <||@
  Comment 178 92 MOV [rax|QWORD] y: 1 size: QWORD  <||@
  Comment 185 94 MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed}  <||@
  Comment 185 {meta{HotSpotType<[C, resolved>;compressed}}  <||@
  Comment 192 96 rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD  <||@
  Comment 192 100 JUMP ~[] destination: B5 -> B6  <||@
  Comment 192 block B6 null  <||@
  Comment 192 102 [] = LABEL numbPhis: 1 align: false label: ?  <||@
  Comment 192 98 r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD  <||@
  Comment 195 104 rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD  <||@
  Comment 199 106 xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU  <||@
  Comment 203 108 rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD  <||@
  Comment 207 110 J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU  <||@
  Comment 211 112 rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD  <||@
  Comment 215 114 xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>  <||@
  Comment 219 116 J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU  <||@
  Comment 223 118 xmm0|V32_WORD = L oc: SIMD<0,0>  <||@
  Comment 227 120 J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD  <||@
  Comment 232 122 MOV [r13|QWORD[.] + 48] y: 107 size: WORD  <||@
  Comment 239 124 MOV [r13|QWORD[.] + 50] y: 108 size: WORD  <||@
  Comment 246 126 rax|QWORD = MOV [r15|QWORD + 96] size: QWORD  <||@
  Comment 250 128 rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD  <||@
  Comment 254 130 CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD  <||@
  Comment 258 132 BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8  <||@
  Comment 264 block B8 null  <||@
  Comment 264 148 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 264 150 MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD  <||@
  Comment 268 152 AMD64PREFETCH ~[rax|QWORD + 272] instr: 0  <||@
  Comment 275 154 AMD64PREFETCH ~[rax|QWORD + 336] instr: 0  <||@
  Comment 282 156 AMD64PREFETCH ~[rax|QWORD + 400] instr: 0  <||@
  Comment 289 158 AMD64PREFETCH ~[rax|QWORD + 464] instr: 0  <||@
  Comment 296 160 rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD  <||@
  Comment 296 162 JUMP ~[] destination: B8 -> B9  <||@
  Comment 296 block B9 null  <||@
  Comment 296 164 [] = LABEL numbPhis: 1 align: false label: ?  <||@
  Comment 296 166 rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD  <||@
  Comment 299 168 rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD  <||@
  Comment 303 170 rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD  <||@
  Comment 303 172 rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>}  <||@
  Comment 303 {meta{HotSpotType<Ljava/lang/String;, resolved>}}  <||@
  Comment 313 174 rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD  <||@
  Comment 320 176 MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD  <||@
  Comment 323 178 MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}  <||@
  Comment 323 {meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}}  <||@
  Comment 330 180 rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3  <||@
  Comment 334 182 MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD  <||@
  Comment 337 184 MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD  <||@
  Comment 341 186 MOV [rax|QWORD[*] + 36] y: 18 size: DWORD  <||@
  Comment 348 188 MOV [rax|QWORD[*] + 24] y: 1 size: QWORD  <||@
  Comment 356 190 MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed}  <||@
  Comment 356 {meta{HotSpotType<[C, resolved>;compressed}}  <||@
  Comment 363 192 rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD  <||@
  Comment 368 194 MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD  <||@
  Comment 372 196 rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD  <||@
  Comment 377 198 MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD  <||@
  Comment 381 200 rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD  <||@
  Comment 386 202 MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD  <||@
  Comment 390 204 rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD  <||@
  Comment 395 206 MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD  <||@
  Comment 399 208 rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD  <||@
  Comment 404 210 MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD  <||@
  Comment 408 212 rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD  <||@
  Comment 413 214 MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD  <||@
  Comment 417 216 rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD  <||@
  Comment 422 218 MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD  <||@
  Comment 426 220 rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD  <||@
  Comment 431 222 MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD  <||@
  Comment 435 224 rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD  <||@
  Comment 440 226 MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD  <||@
  Comment 444 228 rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD  <||@
  Comment 449 230 MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD  <||@
  Comment 453 232 rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD  <||@
  Comment 458 234 MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD  <||@
  Comment 462 236 rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD  <||@
  Comment 467 238 MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD  <||@
  Comment 471 240 rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD  <||@
  Comment 476 242 MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD  <||@
  Comment 480 244 rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD  <||@
  Comment 485 246 MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD  <||@
  Comment 489 248 rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD  <||@
  Comment 494 250 MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD  <||@
  Comment 498 252 rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD  <||@
  Comment 503 254 MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD  <||@
  Comment 507 256 rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD  <||@
  Comment 512 258 MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD  <||@
  Comment 516 260 MOV [rax|QWORD[*] + 74] y: 108 size: WORD  <||@
  Comment 522 262 rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 525 264 RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87  <||@
  Comment 534 12  <||@
  Comment 544 block B1 null  <||@
  Comment 544 18 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 544 20 rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>}  <||@
  Comment 544 {meta{HotSpotType<[I, resolved>}}  <||@
  Comment 554 22 rdx|DWORD = MOVE input: int[8|0x8]  <||@
  Comment 559 24 rcx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 564 26 rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0]  <||@
  Comment 564 {Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL}  <||@
  Comment 569 [r13:0]at bench.StringOp.appendCont(Bench.scala:147) [bci: 0, duringCall: false, rethrow: false]
              |0             |1 
     locals:  |r13|QWORD[.]  |-   <||@
  Comment 570 28 rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD  <||@
  Comment 570 30 JUMP ~[] destination: B1 -> B3  <||@
  Comment 575 block B4 null  <||@
  Comment 575 64 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 575 66 rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>}  <||@
  Comment 575 {meta{HotSpotType<[C, resolved>}}  <||@
  Comment 585 68 rdx|DWORD = MOVE input: int[34|0x22]  <||@
  Comment 590 70 rcx|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 595 72 rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0]  <||@
  Comment 595 {Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL}  <||@
  Comment 600 [r13:0, r14:0]at bench.StringOp.appendCont(Bench.scala:147) [bci: 0, duringCall: false, rethrow: false]
              |0             |1 
     locals:  |r13|QWORD[.]  |-   <||@
  Comment 601 76 JUMP ~[] destination: B4 -> B6  <||@
  Comment 606 block B7 null  <||@
  Comment 606 134 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 606 136 rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>}  <||@
  Comment 606 {meta{HotSpotType<[I, resolved>}}  <||@
  Comment 616 138 rdx|DWORD = MOVE input: int[16|0x10]  <||@
  Comment 621 140 rcx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 626 142 rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17]  <||@
  Comment 626 {Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL}  <||@
  Comment 631 [r13:0]at java.lang.String.getChars(String.java:827) [bci: 61, duringCall: false, rethrow: false]
              |0  |1  |2  |3  |4 
     locals:  |-  |-  |-  |-  |- 
  at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35, duringCall: true, rethrow: false]
              |0                                                                                         |1  |2          
     locals:  |vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}  |-  |int[1|0x1] 
  at java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7, duringCall: true, rethrow: false]
              |0                                                                                                                              |1 
     locals:  |vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}                                       |- 
     locks:   |monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated]  |  
  at bench.StringOp.cont(Bench.scala:169) [bci: 115, duringCall: true, rethrow: false]
              |0  |1                                                                                        
     locals:  |-  |vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
  at bench.StringOp.appendCont(Bench.scala:149) [bci: 17, duringCall: true, rethrow: false]
              |0  |1 
     locals:  |-  |-   <||@
  Comment 632 144 rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD  <||@
  Comment 632 146 JUMP ~[] destination: B7 -> B9  <||@
  Comment 637 {Stub<ExceptionHandlerStub.exceptionHandler>@0x1142a5560:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 637 4  <||@
  Comment 643 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x1068a1f88, value=0x113f17500]:0x113f17500}  <||@
  Comment 643 5  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-726[bench.StringOp.appendCont()]"
  method "HotSpotCompilation-726[bench.StringOp.appendCont()]"
  date 1527728115713
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 11492d0e0 448b560849c1e203493bc20f856f8d5eff900f1f80000000000f1f800000000089842400c0feff4883ec1848896c24104c8bee498b4760498b7770488d5030483bd60f87d8010000498957600f1880f00000004c8bf0c7400c1000000048c70001000000c74008410000f8c4c17d6f056cffffffc5fe7f4010498b4760488d7058493b77700f87b4010000498977600f1880180100000f1880580100000f1880980100000f1880d8010000c7400c2200000048c70001000000c74008410000f84c8be8498d4610c5fe6f00498d4510c5fe7f00498d4530c5f9efc0c5fe7f00c5f9efc0c5f97e40206641c745306b006641c745326c00498b4760488d7050493b77700f8756010000498977600f1880100100000f1880500100000f1880900100000f1880d0010000488bf0488d501848b9d01600c007000000488b89a8000000488908c74008da0200f848c1ea0389500c44896010c740241200000048c7401801000000c74020410000f8410fbf551066895028410fbf55126689502a410fbf55146689502c410fbf55166689502e410fbf551866895030410fbf551a66895032410fbf551c66895034410fbf551e66895036410fbf552066895038410fbf55226689503a410fbf55246689503c410fbf55266689503e410fbf552866895040410fbf552a66895042410fbf552c66895044410fbf552e66895046410fbf55306689504866c7404a6c00488bc6488b6c24104883c41885050a6de0f0c5f877c348be680b00c007000000ba08000000b901000000e8077b040090e914feffff48be080200c007000000ba22000000b900000000e8e87a040090e962feffff48be680b00c007000000ba10000000b901000000e8c97a040090e9abfeffffe8fe8197ff90e898a15eff90f4f4f4f4f4f4f4  <||@
  Comment 0 2  <||@
  Comment 11 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x1068a1f78, value=0x113f15e60]:0x113f15e60}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 3  <||@
  Comment 32 1  <||@
  Comment 43 block B0 null  <||@
  Comment 43 0 [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 43 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 48 4 [stack:32|QWORD] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@5104aea3 slotKind: QWORD  <||@
  Comment 48 6 r13|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 51 8 rax|QWORD = MOV [r15|QWORD + 96] size: QWORD  <||@
  Comment 55 10 rsi|QWORD = MOV [r15|QWORD + 112] size: QWORD  <||@
  Comment 59 12 rdx|QWORD = LEA [rax|QWORD + 48] size: QWORD  <||@
  Comment 63 14 CMP (x: rdx|QWORD, y: rsi|QWORD) size: QWORD  <||@
  Comment 66 16 BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B2  <||@
  Comment 72 block B2 null  <||@
  Comment 72 32 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 72 34 MOV (x: [r15|QWORD + 96], y: rdx|QWORD) size: QWORD  <||@
  Comment 76 36 AMD64PREFETCH ~[rax|QWORD + 240] instr: 0  <||@
  Comment 83 38 rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD  <||@
  Comment 83 40 JUMP ~[] destination: B2 -> B3  <||@
  Comment 83 block B3 null  <||@
  Comment 83 42 [] = LABEL numbPhis: 1 align: false label: ?  <||@
  Comment 83 44 r14|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD  <||@
  Comment 86 46 MOV [rax|QWORD[*] + 12] y: 16 size: DWORD  <||@
  Comment 93 48 MOV [rax|QWORD[*]] y: 1 size: QWORD  <||@
  Comment 100 50 MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed}  <||@
  Comment 100 {meta{HotSpotType<[C, resolved>;compressed}}  <||@
  Comment 107 52 xmm0|V256_QWORD = A od: SIMD<28147922879250529,29273839966224485,30399757053198441,29836811394809962> oe: QWORD  <||@
  Comment 107 {DataSection[0x0]}  <||@
  Comment 116 54 J (address: [rax|QWORD[*] + 16], input: xmm0|V256_QWORD) nZ: YMM oh: VMOVDQU  <||@
  Comment 121 56 rax|QWORD = MOV [r15|QWORD + 96] size: QWORD  <||@
  Comment 125 58 rsi|QWORD = LEA [rax|QWORD + 88] size: QWORD  <||@
  Comment 129 60 CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD  <||@
  Comment 133 62 BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5  <||@
  Comment 139 block B5 null  <||@
  Comment 139 78 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 139 80 MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD  <||@
  Comment 143 82 AMD64PREFETCH ~[rax|QWORD + 280] instr: 0  <||@
  Comment 150 84 AMD64PREFETCH ~[rax|QWORD + 344] instr: 0  <||@
  Comment 157 86 AMD64PREFETCH ~[rax|QWORD + 408] instr: 0  <||@
  Comment 164 88 AMD64PREFETCH ~[rax|QWORD + 472] instr: 0  <||@
  Comment 171 90 MOV [rax|QWORD + 12] y: 34 size: DWORD  <||@
  Comment 178 92 MOV [rax|QWORD] y: 1 size: QWORD  <||@
  Comment 185 94 MOV [rax|QWORD + 8] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed}  <||@
  Comment 185 {meta{HotSpotType<[C, resolved>;compressed}}  <||@
  Comment 192 96 rax|QWORD[.] = MOVE rax|QWORD moveKind: QWORD  <||@
  Comment 192 100 JUMP ~[] destination: B5 -> B6  <||@
  Comment 192 block B6 null  <||@
  Comment 192 102 [] = LABEL numbPhis: 1 align: false label: ?  <||@
  Comment 192 98 r13|QWORD[.] = MOVE rax|QWORD[.] moveKind: QWORD  <||@
  Comment 195 104 rax|QWORD[.] = LEA [r14|QWORD[.] + 16] size: QWORD  <||@
  Comment 199 106 xmm0|V256_WORD = H [rax|QWORD[.]] nZ: YMM oh: VMOVDQU  <||@
  Comment 203 108 rax|QWORD[.] = LEA [r13|QWORD[.] + 16] size: QWORD  <||@
  Comment 207 110 J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU  <||@
  Comment 211 112 rax|QWORD[.] = LEA [r13|QWORD[.] + 48] size: QWORD  <||@
  Comment 215 114 xmm0|V256_WORD = L oc: SIMD<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>  <||@
  Comment 219 116 J (address: [rax|QWORD[.]], input: xmm0|V256_WORD) nZ: YMM oh: VMOVDQU  <||@
  Comment 223 118 xmm0|V32_WORD = L oc: SIMD<0,0>  <||@
  Comment 227 120 J (address: [rax|QWORD[.] + 32], input: xmm0|V32_WORD) nZ: XMM oh: VMOVD  <||@
  Comment 232 122 MOV [r13|QWORD[.] + 48] y: 107 size: WORD  <||@
  Comment 239 124 MOV [r13|QWORD[.] + 50] y: 108 size: WORD  <||@
  Comment 246 126 rax|QWORD = MOV [r15|QWORD + 96] size: QWORD  <||@
  Comment 250 128 rsi|QWORD = LEA [rax|QWORD + 80] size: QWORD  <||@
  Comment 254 130 CMP (x: rsi|QWORD, y: [r15|QWORD + 112]) size: QWORD  <||@
  Comment 258 132 BRANCH trueDestinationProbability: 0.010000000000000009 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B8  <||@
  Comment 264 block B8 null  <||@
  Comment 264 148 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 264 150 MOV (x: [r15|QWORD + 96], y: rsi|QWORD) size: QWORD  <||@
  Comment 268 152 AMD64PREFETCH ~[rax|QWORD + 272] instr: 0  <||@
  Comment 275 154 AMD64PREFETCH ~[rax|QWORD + 336] instr: 0  <||@
  Comment 282 156 AMD64PREFETCH ~[rax|QWORD + 400] instr: 0  <||@
  Comment 289 158 AMD64PREFETCH ~[rax|QWORD + 464] instr: 0  <||@
  Comment 296 160 rax|QWORD[*] = MOVE rax|QWORD moveKind: QWORD  <||@
  Comment 296 162 JUMP ~[] destination: B8 -> B9  <||@
  Comment 296 block B9 null  <||@
  Comment 296 164 [] = LABEL numbPhis: 1 align: false label: ?  <||@
  Comment 296 166 rsi|QWORD[.] = MOVE rax|QWORD[*] moveKind: QWORD  <||@
  Comment 299 168 rdx|QWORD[*] = LEA [rax|QWORD[*] + 24] size: QWORD  <||@
  Comment 303 170 rdx|QWORD[.] = MOVE rdx|QWORD[*] moveKind: QWORD  <||@
  Comment 303 172 rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<Ljava/lang/String;, resolved>}  <||@
  Comment 303 {meta{HotSpotType<Ljava/lang/String;, resolved>}}  <||@
  Comment 313 174 rcx|QWORD = MOV [rcx|QWORD + 168] size: QWORD  <||@
  Comment 320 176 MOV (x: [rax|QWORD[*]], y: rcx|QWORD) size: QWORD  <||@
  Comment 323 178 MOV [rax|QWORD[*] + 8] y: -559030611 size: DWORD c: meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}  <||@
  Comment 323 {meta{HotSpotType<Ljava/lang/String;, resolved>;compressed}}  <||@
  Comment 330 180 rdx|DWORD[.] = COMPRESSPOINTER (input: rdx|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: com.oracle.graal.enterprise.z.a@2487f788 encoding: base: 0 shift: 3  <||@
  Comment 334 182 MOV (x: [rax|QWORD[*] + 12], y: rdx|DWORD[.]) size: DWORD  <||@
  Comment 337 184 MOV (x: [rax|QWORD[*] + 16], y: r12|ILLEGAL) size: DWORD  <||@
  Comment 341 186 MOV [rax|QWORD[*] + 36] y: 18 size: DWORD  <||@
  Comment 348 188 MOV [rax|QWORD[*] + 24] y: 1 size: QWORD  <||@
  Comment 356 190 MOV [rax|QWORD[*] + 32] y: -559030611 size: DWORD c: meta{HotSpotType<[C, resolved>;compressed}  <||@
  Comment 356 {meta{HotSpotType<[C, resolved>;compressed}}  <||@
  Comment 363 192 rdx|DWORD = MOVSX [r13|QWORD[.] + 16] size: DWORD  <||@
  Comment 368 194 MOV (x: [rax|QWORD[*] + 40], y: rdx|DWORD) size: WORD  <||@
  Comment 372 196 rdx|DWORD = MOVSX [r13|QWORD[.] + 18] size: DWORD  <||@
  Comment 377 198 MOV (x: [rax|QWORD[*] + 42], y: rdx|DWORD) size: WORD  <||@
  Comment 381 200 rdx|DWORD = MOVSX [r13|QWORD[.] + 20] size: DWORD  <||@
  Comment 386 202 MOV (x: [rax|QWORD[*] + 44], y: rdx|DWORD) size: WORD  <||@
  Comment 390 204 rdx|DWORD = MOVSX [r13|QWORD[.] + 22] size: DWORD  <||@
  Comment 395 206 MOV (x: [rax|QWORD[*] + 46], y: rdx|DWORD) size: WORD  <||@
  Comment 399 208 rdx|DWORD = MOVSX [r13|QWORD[.] + 24] size: DWORD  <||@
  Comment 404 210 MOV (x: [rax|QWORD[*] + 48], y: rdx|DWORD) size: WORD  <||@
  Comment 408 212 rdx|DWORD = MOVSX [r13|QWORD[.] + 26] size: DWORD  <||@
  Comment 413 214 MOV (x: [rax|QWORD[*] + 50], y: rdx|DWORD) size: WORD  <||@
  Comment 417 216 rdx|DWORD = MOVSX [r13|QWORD[.] + 28] size: DWORD  <||@
  Comment 422 218 MOV (x: [rax|QWORD[*] + 52], y: rdx|DWORD) size: WORD  <||@
  Comment 426 220 rdx|DWORD = MOVSX [r13|QWORD[.] + 30] size: DWORD  <||@
  Comment 431 222 MOV (x: [rax|QWORD[*] + 54], y: rdx|DWORD) size: WORD  <||@
  Comment 435 224 rdx|DWORD = MOVSX [r13|QWORD[.] + 32] size: DWORD  <||@
  Comment 440 226 MOV (x: [rax|QWORD[*] + 56], y: rdx|DWORD) size: WORD  <||@
  Comment 444 228 rdx|DWORD = MOVSX [r13|QWORD[.] + 34] size: DWORD  <||@
  Comment 449 230 MOV (x: [rax|QWORD[*] + 58], y: rdx|DWORD) size: WORD  <||@
  Comment 453 232 rdx|DWORD = MOVSX [r13|QWORD[.] + 36] size: DWORD  <||@
  Comment 458 234 MOV (x: [rax|QWORD[*] + 60], y: rdx|DWORD) size: WORD  <||@
  Comment 462 236 rdx|DWORD = MOVSX [r13|QWORD[.] + 38] size: DWORD  <||@
  Comment 467 238 MOV (x: [rax|QWORD[*] + 62], y: rdx|DWORD) size: WORD  <||@
  Comment 471 240 rdx|DWORD = MOVSX [r13|QWORD[.] + 40] size: DWORD  <||@
  Comment 476 242 MOV (x: [rax|QWORD[*] + 64], y: rdx|DWORD) size: WORD  <||@
  Comment 480 244 rdx|DWORD = MOVSX [r13|QWORD[.] + 42] size: DWORD  <||@
  Comment 485 246 MOV (x: [rax|QWORD[*] + 66], y: rdx|DWORD) size: WORD  <||@
  Comment 489 248 rdx|DWORD = MOVSX [r13|QWORD[.] + 44] size: DWORD  <||@
  Comment 494 250 MOV (x: [rax|QWORD[*] + 68], y: rdx|DWORD) size: WORD  <||@
  Comment 498 252 rdx|DWORD = MOVSX [r13|QWORD[.] + 46] size: DWORD  <||@
  Comment 503 254 MOV (x: [rax|QWORD[*] + 70], y: rdx|DWORD) size: WORD  <||@
  Comment 507 256 rdx|DWORD = MOVSX [r13|QWORD[.] + 48] size: DWORD  <||@
  Comment 512 258 MOV (x: [rax|QWORD[*] + 72], y: rdx|DWORD) size: WORD  <||@
  Comment 516 260 MOV [rax|QWORD[*] + 74] y: 108 size: WORD  <||@
  Comment 522 262 rax|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 525 264 RETURN (savedRbp: stack:16|QWORD, value: rax|QWORD[.]) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@767a9a87  <||@
  Comment 534 12  <||@
  Comment 544 block B1 null  <||@
  Comment 544 18 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 544 20 rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>}  <||@
  Comment 544 {meta{HotSpotType<[I, resolved>}}  <||@
  Comment 554 22 rdx|DWORD = MOVE input: int[8|0x8]  <||@
  Comment 559 24 rcx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 564 26 rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0]  <||@
  Comment 564 {Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL}  <||@
  Comment 569 [r13:0]at bench.StringOp.appendCont(Bench.scala:147) [bci: 0, duringCall: false, rethrow: false]
              |0             |1 
     locals:  |r13|QWORD[.]  |-   <||@
  Comment 570 28 rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD  <||@
  Comment 570 30 JUMP ~[] destination: B1 -> B3  <||@
  Comment 575 block B4 null  <||@
  Comment 575 64 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 575 66 rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[C, resolved>}  <||@
  Comment 575 {meta{HotSpotType<[C, resolved>}}  <||@
  Comment 585 68 rdx|DWORD = MOVE input: int[34|0x22]  <||@
  Comment 590 70 rcx|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 595 72 rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:0]  <||@
  Comment 595 {Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL}  <||@
  Comment 600 [r13:0, r14:0]at bench.StringOp.appendCont(Bench.scala:147) [bci: 0, duringCall: false, rethrow: false]
              |0             |1 
     locals:  |r13|QWORD[.]  |-   <||@
  Comment 601 76 JUMP ~[] destination: B4 -> B6  <||@
  Comment 606 block B7 null  <||@
  Comment 606 134 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 606 136 rsi|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[I, resolved>}  <||@
  Comment 606 {meta{HotSpotType<[I, resolved>}}  <||@
  Comment 616 138 rdx|DWORD = MOVE input: int[16|0x10]  <||@
  Comment 621 140 rcx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 626 142 rax|QWORD[.] = NEAR_FOREIGN_CALL [rsi|QWORD, rdx|DWORD, rcx|DWORD] [r10|ILLEGAL, rdi|ILLEGAL, xmm0|ILLEGAL, xmm1|ILLEGAL, xmm2|ILLEGAL, xmm3|ILLEGAL, xmm4|ILLEGAL, xmm5|ILLEGAL, xmm6|ILLEGAL, xmm7|ILLEGAL, xmm8|ILLEGAL, xmm9|ILLEGAL, xmm10|ILLEGAL, xmm11|ILLEGAL, xmm12|ILLEGAL, xmm13|ILLEGAL, xmm14|ILLEGAL, xmm15|ILLEGAL, xmm16|ILLEGAL, xmm17|ILLEGAL, xmm18|ILLEGAL, xmm19|ILLEGAL, xmm20|ILLEGAL, xmm21|ILLEGAL, xmm22|ILLEGAL, xmm23|ILLEGAL, xmm24|ILLEGAL, xmm25|ILLEGAL, xmm26|ILLEGAL, xmm27|ILLEGAL, xmm28|ILLEGAL, xmm29|ILLEGAL, xmm30|ILLEGAL, xmm31|ILLEGAL, rax|ILLEGAL, rcx|ILLEGAL, rdx|ILLEGAL, rsi|ILLEGAL, r8|ILLEGAL, r9|ILLEGAL, r11|ILLEGAL, rbx|ILLEGAL, rbp|ILLEGAL] callTarget: Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL state [bci:61, 35, 7, 115, 17]  <||@
  Comment 626 {Stub<NewArrayStub.newArray>@0x114974e20:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]:CallingConvention[rsi|QWORD, rdx|DWORD, rcx|DWORD -> rax|QWORD[.]]; temps=r10|ILLEGAL,rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r11|ILLEGAL,rbx|ILLEGAL,rbp|ILLEGAL}  <||@
  Comment 631 [r13:0]at java.lang.String.getChars(String.java:827) [bci: 61, duringCall: false, rethrow: false]
              |0  |1  |2  |3  |4 
     locals:  |-  |-  |-  |-  |- 
  at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:449) [bci: 35, duringCall: true, rethrow: false]
              |0                                                                                         |1  |2          
     locals:  |vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}  |-  |int[1|0x1] 
  at java.lang.StringBuffer.append(StringBuffer.java:270) [bci: 7, duringCall: true, rethrow: false]
              |0                                                                                                                              |1 
     locals:  |vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}                                       |- 
     locks:   |monitor[vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]}, stack:32|QWORD, eliminated]  |  
  at bench.StringOp.cont(Bench.scala:169) [bci: 115, duringCall: true, rethrow: false]
              |0  |1                                                                                        
     locals:  |-  |vobject:StringBuffer:0{count=int[17|0x11],value=r13|QWORD[.],toStringCache=Object[null]} 
  at bench.StringOp.appendCont(Bench.scala:149) [bci: 17, duringCall: true, rethrow: false]
              |0  |1 
     locals:  |-  |-   <||@
  Comment 632 144 rax|QWORD[*] = MOVE rax|QWORD[.] moveKind: QWORD  <||@
  Comment 632 146 JUMP ~[] destination: B7 -> B9  <||@
  Comment 637 {Stub<ExceptionHandlerStub.exceptionHandler>@0x1142a5560:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 637 4  <||@
  Comment 643 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x1068a1f88, value=0x113f17500]:0x113f17500}  <||@
  Comment 643 5  <||@
  HexCodeFile>>> <|@
end_nmethod
