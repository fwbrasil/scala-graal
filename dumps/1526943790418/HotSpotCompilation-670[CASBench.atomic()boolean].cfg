begin_compilation
  name " HotSpotCompilation-670[bench.CASBench.atomic()]"
  method "HotSpotCompilation-670[bench.CASBench.atomic()]"
  date 1526943790428
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a62 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@org.graalvm.compiler.nodes.StartNode>@ stateAfter: - #next: a62  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a! Lbench/CASBench;
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 v65 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@org.graalvm.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v65 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a62 a64 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a62 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: CASBench.a
nullCheck: false
stamp: n# Ljava/util/concurrent/atomic/AtomicLong;
=== Inputs ===
stateBefore: - 
guard: - 
address: v65 
=== Succesors ===
next: v68 
=== Usages ===
v66 v68 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v65 #next: v68  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
code: ResolvedJavaMethodBytecode<CASBench.atomic()>
duringCall: false
localsSize: 3
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 24
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: a1 - - 
=== Succesors ===
=== Usages ===
v59 v68 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: a1 - -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v68 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateBefore: ?2 
object: a62 
=== Succesors ===
next: v33 
=== Usages ===
=== Predecessor ===
a62 >@ <|@
instruction <@NullCheck|@org.graalvm.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?2 object: a62 #next: v33  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
barriers: 0
location: ANY_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: j63 
=== Usages ===
=== Predecessor ===
v68 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: j63  <|@  <|@
f <@~|@floating>@ <|@
tid v66 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times8
stamp: void*
=== Inputs ===
base: - 
index: a62 
=== Succesors ===
=== Usages ===
j63 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: - index: a62  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j63 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: AtomicLong.value
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v66 
=== Succesors ===
next: v34 
=== Usages ===
j12 i39 
=== Predecessor ===
v33 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v66 #next: v34  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
barriers: 3
location: ANY_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: a64 
=== Usages ===
=== Predecessor ===
j63 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: a64  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a64 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: CASBench.a
nullCheck: false
stamp: n# Ljava/util/concurrent/atomic/AtomicLong;
=== Inputs ===
stateBefore: - 
guard: - 
address: v65 
=== Succesors ===
next: v52 
=== Usages ===
v67 v41 
=== Predecessor ===
v34 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v65 #next: v52  <|@  <|@
f <@~|@floating>@ <|@
tid v41 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
value: a64 
=== Succesors ===
=== Usages ===
v52 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@org.graalvm.compiler.nodes.calc.IsNullNode>@ value: a64  <|@  <|@
f <@*|@fixed>@ <|@
tid v52 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.0
=== Inputs ===
condition: v41 
=== Succesors ===
trueSuccessor: v51 
falseSuccessor: v49 
=== Usages ===
=== Predecessor ===
a64 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v41 #trueSuccessor: v51 #falseSuccessor: v49  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v51 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v59 
=== Usages ===
=== Predecessor ===
v52 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v59  <|@  <|@
f <@~|@floating>@ <|@
tid a56 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: null
stableDimension: 0
stamp: a - NULL
stampKind: a -
value: Object[null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v59 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i61 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -9483
stableDimension: 0
stamp: i32 [-9483] ⇊00000000ffffdaf5 ⇈00000000ffffdaf5
stampKind: i32
value: int[-9483|0xffffffffffffdaf5]
=== Inputs ===
=== Succesors ===
=== Usages ===
v59 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v59 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateBefore: ?2 
actionAndReason: i61 
speculation: a56 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v51 >@ <|@
instruction <@DynamicDeoptimize|@org.graalvm.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?2 actionAndReason: i61 speculation: a56  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: i39 
=== Usages ===
=== Predecessor ===
v52 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: i39  <|@  <|@
f <@~|@floating>@ <|@
tid v67 <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times8
stamp: void*
=== Inputs ===
base: - 
index: a64 
=== Succesors ===
=== Usages ===
i39 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: - index: a64  <|@  <|@
f <@~|@floating>@ <|@
tid j11 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i64 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i64
value: long[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
j12 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j12 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/290251424@207c20f6
stamp: i64
=== Inputs ===
x: j63 
y: j11 
=== Succesors ===
=== Usages ===
i39 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j63 y: j11  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i39 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: ANY_LOCATION
nullCheck: false
stamp: i32
=== Inputs ===
stateBefore: - 
guard: - 
address: v67 
expectedValue: j63 
newValue: j12 
stateAfter: - 
=== Succesors ===
next: v16 
=== Usages ===
i23 
=== Predecessor ===
v49 >@ <|@
instruction <@LogicCompareAndSwap|@org.graalvm.compiler.nodes.java.LogicCompareAndSwapNode>@ stateBefore: - guard: - address: v67 expectedValue: j63 newValue: j12 stateAfter: - #next: v16  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$84/34233929@d89501c
getReverseOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$85/820756130@48824924
inputBits: 32
resultBits: 1
stamp: i1
=== Inputs ===
value: i39 
=== Succesors ===
=== Usages ===
i24 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@org.graalvm.compiler.nodes.calc.NarrowNode>@ value: i39  <|@  <|@
f <@~|@floating>@ <|@
tid i24 <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$13/2019757725@2c4c7fd6
getReverseOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$14/248298195@6b82c3f3
inputAlwaysPositive: false
inputBits: 1
resultBits: 32
stamp: i32 [0 - 1] ⇈0000000000000001
=== Inputs ===
value: i23 
=== Succesors ===
=== Usages ===
v16 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@org.graalvm.compiler.nodes.calc.ZeroExtendNode>@ value: i23  <|@  <|@
f <@*|@fixed>@ <|@
tid v16 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
result: i24 
memoryMap: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i39 >@ <|@
instruction <@Return|@org.graalvm.compiler.nodes.ReturnNode>@ result: i24 memoryMap: -  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a62 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@org.graalvm.compiler.nodes.StartNode>@ stateAfter: - #next: a62  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a! Lbench/CASBench;
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 v65 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@org.graalvm.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v65 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times1
stamp: void*
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a62 a64 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a62 <|@
result v1|DWORD[.] <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: CASBench.a
nullCheck: false
stamp: n# Ljava/util/concurrent/atomic/AtomicLong;
=== Inputs ===
stateBefore: - 
guard: - 
address: v65 
=== Succesors ===
next: v68 
=== Usages ===
v66 v68 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v65 #next: v68  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
code: ResolvedJavaMethodBytecode<CASBench.atomic()>
duringCall: false
localsSize: 3
locksSize: 0
rethrowException: false
sourceFile: Bench.scala
sourceLine: 24
stackSize: 0
=== Inputs ===
outerFrameState: - 
values: a1 - - 
=== Succesors ===
=== Usages ===
v59 v68 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@org.graalvm.compiler.nodes.FrameState>@ outerFrameState: - values: a1 - -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v68 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateBefore: ?2 
object: a62 
=== Succesors ===
next: v33 
=== Usages ===
=== Predecessor ===
a62 >@ <|@
instruction <@NullCheck|@org.graalvm.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?2 object: a62 #next: v33  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
barriers: 0
location: ANY_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: j63 
=== Usages ===
=== Predecessor ===
v68 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: j63  <|@  <|@
f <@~|@floating>@ <|@
tid v66 <|@
result [v1|DWORD[.] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times8
stamp: void*
=== Inputs ===
base: - 
index: a62 
=== Succesors ===
=== Usages ===
j63 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: - index: a62  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j63 <|@
result v2|QWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: AtomicLong.value
nullCheck: false
stamp: i64
=== Inputs ===
stateBefore: - 
guard: - 
address: v66 
=== Succesors ===
next: v34 
=== Usages ===
j12 i39 
=== Predecessor ===
v33 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v66 #next: v34  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
barriers: 3
location: ANY_LOCATION
stamp: void
=== Inputs ===
=== Succesors ===
next: a64 
=== Usages ===
=== Predecessor ===
j63 >@ <|@
instruction <@Membar|@org.graalvm.compiler.nodes.extended.MembarNode>@ #next: a64  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a64 <|@
result v3|DWORD[.] <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
forceFixed: false
location: CASBench.a
nullCheck: false
stamp: n# Ljava/util/concurrent/atomic/AtomicLong;
=== Inputs ===
stateBefore: - 
guard: - 
address: v65 
=== Succesors ===
next: v52 
=== Usages ===
v67 v41 
=== Predecessor ===
v34 >@ <|@
instruction <@Read|@org.graalvm.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v65 #next: v52  <|@  <|@
f <@~|@floating>@ <|@
tid v41 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
value: a64 
=== Succesors ===
=== Usages ===
v52 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@org.graalvm.compiler.nodes.calc.IsNullNode>@ value: a64  <|@  <|@
f <@*|@fixed>@ <|@
tid v52 <|@
d <@d|@=== Debug Properties ===
stamp: void
trueSuccessorProbability: 0.0
=== Inputs ===
condition: v41 
=== Succesors ===
trueSuccessor: v51 
falseSuccessor: v49 
=== Usages ===
=== Predecessor ===
a64 >@ <|@
instruction <@If|@org.graalvm.compiler.nodes.IfNode>@ condition: v41 #trueSuccessor: v51 #falseSuccessor: v49  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@51989f03 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[.] = MOV [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: v0|QWORD[.] - - 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + v1|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [v1|DWORD[.] * 8 + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[.] = MOV [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TEST (x: v3|DWORD[.], y: v3|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v51 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: v59 
=== Usages ===
=== Predecessor ===
v52 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: v59  <|@  <|@
f <@~|@floating>@ <|@
tid a56 <|@
result Object[null] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: null
stableDimension: 0
stamp: a - NULL
stampKind: a -
value: Object[null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v59 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i61 <|@
result int[-9483|0xffffffffffffdaf5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -9483
stableDimension: 0
stamp: i32 [-9483] ⇊00000000ffffdaf5 ⇈00000000ffffdaf5
stampKind: i32
value: int[-9483|0xffffffffffffdaf5]
=== Inputs ===
=== Succesors ===
=== Usages ===
v59 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v59 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
stateBefore: ?2 
actionAndReason: i61 
speculation: a56 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v51 >@ <|@
instruction <@DynamicDeoptimize|@org.graalvm.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?2 actionAndReason: i61 speculation: a56  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV [r15|QWORD + 668] y: -9483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 680], y: r12|ILLEGAL) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: v0|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
next: i39 
=== Usages ===
=== Predecessor ===
v52 >@ <|@
instruction <@Begin|@org.graalvm.compiler.nodes.BeginNode>@ #next: i39  <|@  <|@
f <@~|@floating>@ <|@
tid v67 <|@
result [v3|DWORD[.] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
scale: Times8
stamp: void*
=== Inputs ===
base: - 
index: a64 
=== Succesors ===
=== Usages ===
i39 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@org.graalvm.compiler.core.amd64.AMD64AddressNode>@ base: - index: a64  <|@  <|@
f <@~|@floating>@ <|@
tid j11 <|@
result long[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i64 [1] ⇊0000000000000001 ⇈0000000000000001
stampKind: i64
value: long[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
j12 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@org.graalvm.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j12 <|@
result v4|QWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.AddNode$$Lambda$12/290251424@207c20f6
stamp: i64
=== Inputs ===
x: j63 
y: j11 
=== Succesors ===
=== Usages ===
i39 
=== Predecessor ===
- >@ <|@
instruction <@+|@org.graalvm.compiler.nodes.calc.AddNode>@ x: j63 y: j11  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i39 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
location: ANY_LOCATION
nullCheck: false
stamp: i32
=== Inputs ===
stateBefore: - 
guard: - 
address: v67 
expectedValue: j63 
newValue: j12 
stateAfter: - 
=== Succesors ===
next: v16 
=== Usages ===
i23 
=== Predecessor ===
v49 >@ <|@
instruction <@LogicCompareAndSwap|@org.graalvm.compiler.nodes.java.LogicCompareAndSwapNode>@ stateBefore: - guard: - address: v67 expectedValue: j63 newValue: j12 stateAfter: - #next: v16  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$84/34233929@d89501c
getReverseOp: org.graalvm.compiler.nodes.calc.NarrowNode$$Lambda$85/820756130@48824924
inputBits: 32
resultBits: 1
stamp: i1
=== Inputs ===
value: i39 
=== Succesors ===
=== Usages ===
i24 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@org.graalvm.compiler.nodes.calc.NarrowNode>@ value: i39  <|@  <|@
f <@~|@floating>@ <|@
tid i24 <|@
result v7|DWORD <|@
d <@d|@=== Debug Properties ===
getOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$13/2019757725@2c4c7fd6
getReverseOp: org.graalvm.compiler.nodes.calc.ZeroExtendNode$$Lambda$14/248298195@6b82c3f3
inputAlwaysPositive: false
inputBits: 1
resultBits: 32
stamp: i32 [0 - 1] ⇈0000000000000001
=== Inputs ===
value: i23 
=== Succesors ===
=== Usages ===
v16 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@org.graalvm.compiler.nodes.calc.ZeroExtendNode>@ value: i23  <|@  <|@
f <@*|@fixed>@ <|@
tid v16 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
result: i24 
memoryMap: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i39 >@ <|@
instruction <@Return|@org.graalvm.compiler.nodes.ReturnNode>@ result: i24 memoryMap: -  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = INC v2|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE v2|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = CAS (address: [v3|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: v4|QWORD) accessKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: v6|DWORD) condition: = <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = AND v5|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v7|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@5ad30aa1 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@51989f03 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[.] = MOV [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: v0|QWORD[.] - - 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + v1|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v2|QWORD = MOV [v1|DWORD[.] * 8 + 16] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[.] = MOV [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TEST (x: v3|DWORD[.], y: v3|DWORD[.]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = INC v2|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE v2|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = CAS (address: [v3|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: v4|QWORD) accessKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: v6|DWORD) condition: = <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = AND v5|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v7|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@5ad30aa1 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   -1  <|@ instruction MOV [r15|QWORD + 668] y: -9483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 680], y: r12|ILLEGAL) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: v0|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: invokevirtual #4          // a:()java.util.concurrent.atomic.AtomicLong
     4: invokevirtual #5          // java.util.concurrent.atomic.AtomicLong.get:()long
     7: lstore_1      
     8: aload_0       
     9: invokevirtual #4          // a:()java.util.concurrent.atomic.AtomicLong
    12: lload_1       
    13: lload_1       
    14: lconst_1      
    15: ladd          
    16: invokevirtual #6          // java.util.concurrent.atomic.AtomicLong.compareAndSet:(long, long)boolean
    19: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@51989f03 slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: rsi|QWORD[.] - - 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + rax|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV [rax|DWORD[.] * 8 + 16] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ instruction TEST (x: r10|DWORD[.], y: r10|DWORD[.]) size: DWORD <|@ <|@
      nr   18  <|@ instruction BRANCH trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   20  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   22  <|@ instruction r11|QWORD = INC rax|QWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   30  <|@ instruction r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: = <|@ <|@
      nr   32  <|@ instruction r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@5ad30aa1 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   40  <|@ instruction MOV [r15|QWORD + 668] y: -9483 size: DWORD <|@ <|@
      nr   42  <|@ instruction MOV (x: [r15|QWORD + 680], y: r12|ILLEGAL) size: QWORD <|@ <|@
      nr   44  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: rsi|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: invokevirtual #4          // a:()java.util.concurrent.atomic.AtomicLong
     4: invokevirtual #5          // java.util.concurrent.atomic.AtomicLong.get:()long
     7: lstore_1      
     8: aload_0       
     9: invokevirtual #4          // a:()java.util.concurrent.atomic.AtomicLong
    12: lload_1       
    13: lload_1       
    14: lconst_1      
    15: ladd          
    16: invokevirtual #6          // java.util.concurrent.atomic.AtomicLong.compareAndSet:(long, long)boolean
    19: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@51989f03 slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: rsi|QWORD[.] - - 
>@ <|@ instruction NULLCHECK [r12|QWORD[*] + rax|DWORD[.] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV [rax|DWORD[.] * 8 + 16] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ instruction TEST (x: r10|DWORD[.], y: r10|DWORD[.]) size: DWORD <|@ <|@
      nr   18  <|@ instruction BRANCH trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   20  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   22  <|@ instruction r11|QWORD = INC rax|QWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = MOVE input: boolean[true|0x1] <|@ <|@
      nr   30  <|@ instruction r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: = <|@ <|@
      nr   32  <|@ instruction r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@5ad30aa1 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL numbPhis: 0 align: false label: ? <|@ <|@
      nr   40  <|@ instruction MOV [r15|QWORD + 668] y: -9483 size: DWORD <|@ <|@
      nr   42  <|@ instruction MOV (x: [r15|QWORD + 680], y: r12|ILLEGAL) size: QWORD <|@ <|@
      nr   44  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
bench.CASBench.atomic(Bench.scala:24) [bci: 0]
locals: rsi|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: invokevirtual #4          // a:()java.util.concurrent.atomic.AtomicLong
     4: invokevirtual #5          // java.util.concurrent.atomic.AtomicLong.get:()long
     7: lstore_1      
     8: aload_0       
     9: invokevirtual #4          // a:()java.util.concurrent.atomic.AtomicLong
    12: lload_1       
    13: lload_1       
    14: lconst_1      
    15: ladd          
    16: invokevirtual #6          // java.util.concurrent.atomic.AtomicLong.compareAndSet:(long, long)boolean
    19: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849c1e203493bc20f85efffffff900f1f80000000000f1f800000000089842400c0feff4883ec1848896c24108b4610418504c4488b04c510000000448b56104585d20f843c0000004c8bd849ffc3f04e0fb11cd510000000b80100000041ba00000000440f44d045231500000000418bc2488b6c24104883c418850500000000c5f877c341c7879c020000f5daffff4d89a7a8020000e80000000090e80000000090e80000000090  <||@
  Comment 0 2  <||@
  Comment 11 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x103aa1f78, value=0x10be92e60]:0x10be92e60}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 3  <||@
  Comment 32 1  <||@
  Comment 43 block B0 null  <||@
  Comment 43 0 [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 43 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 48 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@51989f03 slotKind: QWORD  <||@
  Comment 48 8 rax|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 51 10 NULLCHECK [r12|QWORD[*] + rax|DWORD[.] * 8] state [bci:0]  <||@
  Comment 51 [rax:0, rsi:0]at bench.CASBench.atomic(Bench.scala:24) [bci: 0, duringCall: false, rethrow: false]
              |0             |1  |2 
     locals:  |rsi|QWORD[.]  |-  |-   <||@
  Comment 51 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 55 12 rax|QWORD = MOV [rax|DWORD[.] * 8 + 16] size: QWORD  <||@
  Comment 63 14 r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 67 16 TEST (x: r10|DWORD[.], y: r10|DWORD[.]) size: DWORD  <||@
  Comment 70 18 BRANCH trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2  <||@
  Comment 76 block B2 null  <||@
  Comment 76 20 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 76 22 r11|QWORD = INC rax|QWORD size: QWORD  <||@
  Comment 82 26 rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD  <||@
  Comment 92 28 rax|DWORD = MOVE input: boolean[true|0x1]  <||@
  Comment 97 30 r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: =  <||@
  Comment 107 32 r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1]  <||@
  Comment 107 {DataSection[0x0]}  <||@
  Comment 114 34 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 117 36 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@5ad30aa1  <||@
  Comment 126 12  <||@
  Comment 136 block B1 null  <||@
  Comment 136 38 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 136 40 MOV [r15|QWORD + 668] y: -9483 size: DWORD  <||@
  Comment 147 42 MOV (x: [r15|QWORD + 680], y: r12|ILLEGAL) size: QWORD  <||@
  Comment 154 44 DEOPT info [bci:0]  <||@
  Comment 154 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x103aa1f90, value=0x10be945fe]:0x10be945fe}  <||@
  Comment 159 [rsi:0]at bench.CASBench.atomic(Bench.scala:24) [bci: 0, duringCall: false, rethrow: false]
              |0             |1  |2 
     locals:  |rsi|QWORD[.]  |-  |-   <||@
  Comment 160 {Stub<ExceptionHandlerStub.exceptionHandler>@0x10c20b4a0:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 160 4  <||@
  Comment 166 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x103aa1f88, value=0x10be94500]:0x10be94500}  <||@
  Comment 166 5  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-670[bench.CASBench.atomic()]"
  method "HotSpotCompilation-670[bench.CASBench.atomic()]"
  date 1526943790647
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 10c574d40 448b560849c1e203493bc20f850fe191ff900f1f80000000000f1f800000000089842400c0feff4883ec1848896c24108b4610418504c4488b04c510000000448b56104585d20f843c0000004c8bd849ffc3f04e0fb11cd510000000b80100000041ba00000000440f44d04523156effffff418bc2488b6c24104883c418850542b23cf6c5f877c341c7879c020000f5daffff4d89a7a8020000e81ff891ff90e8bb66c9ff90e815f791ff90f4f4f4f4  <||@
  Comment 0 2  <||@
  Comment 11 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x103aa1f78, value=0x10be92e60]:0x10be92e60}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 3  <||@
  Comment 32 1  <||@
  Comment 43 block B0 null  <||@
  Comment 43 0 [rsi|QWORD[.], rbp|QWORD] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 43 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 48 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: org.graalvm.compiler.lir.amd64.AMD64FrameMapBuilder@51989f03 slotKind: QWORD  <||@
  Comment 48 8 rax|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 51 10 NULLCHECK [r12|QWORD[*] + rax|DWORD[.] * 8] state [bci:0]  <||@
  Comment 51 [rax:0, rsi:0]at bench.CASBench.atomic(Bench.scala:24) [bci: 0, duringCall: false, rethrow: false]
              |0             |1  |2 
     locals:  |rsi|QWORD[.]  |-  |-   <||@
  Comment 51 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 55 12 rax|QWORD = MOV [rax|DWORD[.] * 8 + 16] size: QWORD  <||@
  Comment 63 14 r10|DWORD[.] = MOV [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 67 16 TEST (x: r10|DWORD[.], y: r10|DWORD[.]) size: DWORD  <||@
  Comment 70 18 BRANCH trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2  <||@
  Comment 76 block B2 null  <||@
  Comment 76 20 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 76 22 r11|QWORD = INC rax|QWORD size: QWORD  <||@
  Comment 82 26 rax|QWORD = CAS (address: [r10|DWORD[.] * 8 + 16], cmpValue: rax|QWORD, newValue: r11|QWORD) accessKind: QWORD  <||@
  Comment 92 28 rax|DWORD = MOVE input: boolean[true|0x1]  <||@
  Comment 97 30 r10|DWORD = CMOVE (falseValue: boolean[false|0x0], ~trueValue: rax|DWORD) condition: =  <||@
  Comment 107 32 r10|DWORD = AND r10|DWORD alignment: 4 size: DWORD y: int[1|0x1]  <||@
  Comment 107 {DataSection[0x0]}  <||@
  Comment 114 34 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 117 36 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false thread: r15 scratchForSafepointOnReturn: rcx config: org.graalvm.compiler.hotspot.GraalHotSpotVMConfig@5ad30aa1  <||@
  Comment 126 12  <||@
  Comment 136 block B1 null  <||@
  Comment 136 38 [] = LABEL numbPhis: 0 align: false label: ?  <||@
  Comment 136 40 MOV [r15|QWORD + 668] y: -9483 size: DWORD  <||@
  Comment 147 42 MOV (x: [r15|QWORD + 680], y: r12|ILLEGAL) size: QWORD  <||@
  Comment 154 44 DEOPT info [bci:0]  <||@
  Comment 154 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x103aa1f90, value=0x10be945fe]:0x10be945fe}  <||@
  Comment 159 [rsi:0]at bench.CASBench.atomic(Bench.scala:24) [bci: 0, duringCall: false, rethrow: false]
              |0             |1  |2 
     locals:  |rsi|QWORD[.]  |-  |-   <||@
  Comment 160 {Stub<ExceptionHandlerStub.exceptionHandler>@0x10c20b4a0:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm16|ILLEGAL,xmm17|ILLEGAL,xmm18|ILLEGAL,xmm19|ILLEGAL,xmm20|ILLEGAL,xmm21|ILLEGAL,xmm22|ILLEGAL,xmm23|ILLEGAL,xmm24|ILLEGAL,xmm25|ILLEGAL,xmm26|ILLEGAL,xmm27|ILLEGAL,xmm28|ILLEGAL,xmm29|ILLEGAL,xmm30|ILLEGAL,xmm31|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 160 4  <||@
  Comment 166 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x103aa1f88, value=0x10be94500]:0x10be94500}  <||@
  Comment 166 5  <||@
  HexCodeFile>>> <|@
end_nmethod
